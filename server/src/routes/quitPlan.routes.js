const express = require('express');
const router = express.Router();
const { pool } = require('../config/database');
const { auth, requireActivated } = require('../middleware/auth.middleware');
const { checkMembershipAccess, filterByCurrentMembership } = require('../middleware/membershipAccess.middleware');

// Import setup function
const { setupPlanTemplates } = require('../../setup-templates');

// Middleware ƒë·ªÉ ki·ªÉm tra quy·ªÅn truy c·∫≠p (s·ª≠ d·ª•ng UserMemberships)
const checkUserMembershipAccess = async (req, res, next) => {
    try {
        const userId = req.user.UserID;
        const userRole = req.user.Role;

        // Coach v√† Admin lu√¥n c√≥ quy·ªÅn truy c·∫≠p
        if (['coach', 'admin'].includes(userRole)) {
            return next();
        }

        // Ki·ªÉm tra user c√≥ membership active kh√¥ng
        const membershipQuery = `
            SELECT TOP 1 
                um.MembershipID,
                um.UserID,
                um.PlanID,
                um.StartDate,
                um.EndDate,
                um.Status,
                mp.Name as PlanName,
                mp.Description as PlanDescription,
                mp.Price,
                mp.Duration as PlanDuration
            FROM UserMemberships um
            JOIN MembershipPlans mp ON um.PlanID = mp.PlanID
            WHERE um.UserID = @UserID 
            AND um.Status IN ('active', 'confirmed')
            AND um.EndDate > GETDATE()
            ORDER BY um.EndDate DESC
        `;

        const membershipResult = await pool.request()
            .input('UserID', userId)
            .query(membershipQuery);

        if (membershipResult.recordset.length === 0) {
            return res.status(403).json({
                success: false,
                message: 'B·∫°n c·∫ßn c√≥ g√≥i membership ƒëang ho·∫°t ƒë·ªông ƒë·ªÉ truy c·∫≠p t√≠nh nƒÉng n√†y'
            });
        }

        // Th√™m th√¥ng tin membership v√†o request
        req.userMembership = membershipResult.recordset[0];

        console.log(`User ${userId} has membership access:`, req.userMembership);

        next();
    } catch (error) {
        console.error('Error checking membership access:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói h·ªá th·ªëng khi ki·ªÉm tra quy·ªÅn truy c·∫≠p'
        });
    }
};

// Test endpoint to verify auth
router.post('/test', auth, requireActivated, async (req, res) => {
    try {
        console.log('üß™ Test endpoint - Request received!');
        console.log('üß™ User:', req.user);
        console.log('üß™ Body:', req.body);
        
        res.json({
            success: true,
            message: 'Test endpoint working',
            user: req.user,
            body: req.body
        });
    } catch (error) {
        console.error('‚ùå Test endpoint error:', error);
        res.status(500).json({
            success: false,
            message: 'Test endpoint failed',
            error: error.message
        });
    }
});

// Helper function ƒë·ªÉ ƒë·∫£m b·∫£o PlanTemplates table t·ªìn t·∫°i
const ensurePlanTemplatesExists = async () => {
    try {
        // Check if table exists
        const tableCheck = await pool.request().query(`
            SELECT COUNT(*) as tableExists 
            FROM INFORMATION_SCHEMA.TABLES 
            WHERE TABLE_NAME = 'PlanTemplates'
        `);

        if (tableCheck.recordset[0].tableExists === 0) {
            console.log('PlanTemplates table not found, creating...');
            await setupPlanTemplates();
            return true;
        }

        // Check if table has data
        const dataCheck = await pool.request().query(`SELECT COUNT(*) as dataCount FROM PlanTemplates`);
        if (dataCheck.recordset[0].dataCount === 0) {
            console.log('PlanTemplates table is empty, inserting data...');
            await setupPlanTemplates();
            return true;
        }

        return true;
    } catch (error) {
        console.error('Error ensuring PlanTemplates exists:', error);
        throw error;
    }
};

// Templates hard-coded (di chuy·ªÉn ra ngo√†i ƒë·ªÉ d√πng chung)
const templates = {
    'premium': {
        name: 'K·∫ø ho·∫°ch Premium - 8 tu·∫ßn',
        phases: [
            {
                phaseName: "Tu·∫ßn 1-2: Detox v√† chu·∫©n b·ªã",
                phaseDescription: "‚Ä¢ Th·ª±c hi·ªán detox c∆° th·ªÉ v·ªõi ch·∫ø ƒë·ªô ƒÉn u·ªëng l√†nh m·∫°nh\n‚Ä¢ B·∫Øt ƒë·∫ßu ch∆∞∆°ng tr√¨nh t·∫≠p luy·ªán th·ªÉ ch·∫•t\n‚Ä¢ Thi·∫øt l·∫≠p h·ªá th·ªëng h·ªó tr·ª£ t·ª´ gia ƒë√¨nh v√† b·∫°n b√®\n‚Ä¢ H·ªçc c√°c k·ªπ thu·∫≠t th∆∞ gi√£n: thi·ªÅn, yoga\n‚Ä¢ Ghi ch√©p chi ti·∫øt v·ªÅ triggers v√† c√°ch ƒë·ªëi ph√≥",
                durationDays: 14
            },
            {
                phaseName: "Tu·∫ßn 3-4: X√¢y d·ª±ng th√≥i quen m·ªõi",
                phaseDescription: "‚Ä¢ Ph√°t tri·ªÉn hobby m·ªõi ƒë·ªÉ thay th·∫ø th·ªùi gian h√∫t thu·ªëc\n‚Ä¢ Tham gia c√°c nh√≥m h·ªó tr·ª£ tr·ª±c tuy·∫øn/offline\n‚Ä¢ √Åp d·ª•ng k·ªπ thu·∫≠t CBT (Cognitive Behavioral Therapy)\n‚Ä¢ Theo d√µi c·∫£i thi·ªán s·ª©c kh·ªèe: huy·∫øt √°p, nh·ªãp tim\n‚Ä¢ L·∫≠p k·∫ø ho·∫°ch t√†i ch√≠nh t·ª´ ti·ªÅn ti·∫øt ki·ªám",
                durationDays: 14
            },
            {
                phaseName: "Tu·∫ßn 5-6: ƒê·ªëi ph√≥ v·ªõi kh√≥ khƒÉn",
                phaseDescription: "‚Ä¢ Nh·∫≠n di·ªán v√† x·ª≠ l√Ω c√°c t√¨nh hu·ªëng nguy hi·ªÉm\n‚Ä¢ Ph√°t tri·ªÉn k·ªπ nƒÉng qu·∫£n l√Ω stress n√¢ng cao\n‚Ä¢ T·∫°o ƒë·ªông l·ª±c d√†i h·∫°n v·ªõi m·ª•c ti√™u c·ª• th·ªÉ\n‚Ä¢ ƒê√°nh gi√° ti·∫øn b·ªô v√† ƒëi·ªÅu ch·ªânh k·∫ø ho·∫°ch\n‚Ä¢ Chu·∫©n b·ªã t√¢m l√Ω cho giai ƒëo·∫°n duy tr√¨",
                durationDays: 14
            },
            {
                phaseName: "Tu·∫ßn 7-8: Duy tr√¨ v√† ph√°t tri·ªÉn",
                phaseDescription: "‚Ä¢ ·ªîn ƒë·ªãnh l·ªëi s·ªëng kh√¥ng thu·ªëc l√°\n‚Ä¢ M·ªü r·ªông m·∫°ng l∆∞·ªõi h·ªó tr·ª£ x√£ h·ªôi\n‚Ä¢ Theo d√µi v√† c·∫£i thi·ªán s·ª©c kh·ªèe tinh th·∫ßn\n‚Ä¢ L·∫≠p k·∫ø ho·∫°ch ph√≤ng ng·ª´a t√°i ph√°t\n‚Ä¢ Chia s·∫ª kinh nghi·ªám ƒë·ªÉ gi√∫p ng∆∞·ªùi kh√°c",
                durationDays: 14
            }
        ]
    },
    'premium-intensive': {
        phases: [
            {
                phaseName: "Tu·∫ßn 1-2: C·∫Øt b·ªè ho√†n to√†n v√† detox m·∫°nh",
                phaseDescription: "‚Ä¢ Ng·ª´ng thu·ªëc l√° ngay l·∫≠p t·ª©c, kh√¥ng gi·∫£m d·∫ßn\n‚Ä¢ Ch·∫ø ƒë·ªô detox nghi√™m ng·∫∑t: n∆∞·ªõc chanh, tr√† xanh, rau xanh\n‚Ä¢ T·∫≠p th·ªÉ d·ª•c c∆∞·ªùng ƒë·ªô cao 2 l·∫ßn/ng√†y\n‚Ä¢ Thi·ªÅn v√† yoga m·ªói s√°ng t·ªëi\n‚Ä¢ Ghi nh·∫≠t k√Ω chi ti·∫øt m·ªçi c·∫£m x√∫c v√† tri·ªáu ch·ª©ng\n‚Ä¢ Lo·∫°i b·ªè ho√†n to√†n caffeine v√† ƒë·ªì ng·ªçt"
            },
            {
                phaseName: "Tu·∫ßn 3-4: T√°i c·∫•u tr√∫c l·ªëi s·ªëng ho√†n to√†n",
                phaseDescription: "‚Ä¢ Thay ƒë·ªïi to√†n b·ªô th√≥i quen h√†ng ng√†y\n‚Ä¢ H·ªçc 2 k·ªπ nƒÉng m·ªõi: nh·∫°c c·ª•, ngo·∫°i ng·ªØ, ngh·ªÅ th·ªß c√¥ng\n‚Ä¢ Tham gia c·ªông ƒë·ªìng th·ªÉ thao/c√¢u l·∫°c b·ªô s·ª©c kh·ªèe\n‚Ä¢ √Åp d·ª•ng cold therapy v√† breathing exercises\n‚Ä¢ ƒê·ªçc 1 cu·ªën s√°ch v·ªÅ t√¢m l√Ω h·ªçc m·ªói tu·∫ßn\n‚Ä¢ L·∫≠p k·∫ø ho·∫°ch kinh doanh t·ª´ ti·ªÅn ti·∫øt ki·ªám"
            },
            {
                phaseName: "Tu·∫ßn 5-6: Th·ª≠ th√°ch b·∫£n th√¢n v√† v∆∞·ª£t gi·ªõi h·∫°n",
                phaseDescription: "‚Ä¢ Tham gia c√°c th·ª≠ th√°ch th·ªÉ ch·∫•t: ch·∫°y marathon mini, leo n√∫i\n‚Ä¢ H·ªçc c√°c k·ªπ thu·∫≠t qu·∫£n l√Ω stress c·ªßa doanh nh√¢n\n‚Ä¢ Tr·ªü th√†nh mentor cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu cai thu·ªëc\n‚Ä¢ Th·ª±c h√†nh mindfulness meditation 30 ph√∫t/ng√†y\n‚Ä¢ T·∫°o ra s·∫£n ph·∫©m s√°ng t·∫°o: blog, video, podcast v·ªÅ h√†nh tr√¨nh\n‚Ä¢ X√¢y d·ª±ng network v·ªõi c·ªông ƒë·ªìng healthy lifestyle"
            },
            {
                phaseName: "Tu·∫ßn 7-8: Tr·ªü th√†nh champion v√† lan t·ªèa",
                phaseDescription: "‚Ä¢ Ho√†n thi·ªán b·∫£n th√¢n v·ªõi l·ªëi s·ªëng ho√†n to√†n m·ªõi\n‚Ä¢ T·ªï ch·ª©c events/workshop chia s·∫ª kinh nghi·ªám\n‚Ä¢ X√¢y d·ª±ng k·∫ø ho·∫°ch d√†i h·∫°n 5-10 nƒÉm t·ªõi\n‚Ä¢ Tr·ªü th√†nh inspiration cho c·ªông ƒë·ªìng\n‚Ä¢ Ph√°t tri·ªÉn d·ª± √°n kinh doanh/charity li√™n quan ƒë·∫øn s·ª©c kh·ªèe\n‚Ä¢ L·∫≠p k·∫ø ho·∫°ch maintenance v√† continuous improvement"
            }
        ]
    },
    'basic': {
        name: 'K·∫ø ho·∫°ch C∆° b·∫£n - 2 tu·∫ßn',
        phases: [
            {
                phaseName: "Tu·∫ßn 1 (Ng√†y 1-7): Chu·∫©n b·ªã v√† b·∫Øt ƒë·∫ßu",
                phaseDescription: "‚Ä¢ ƒê·∫∑t ng√†y quit smoking c·ª• th·ªÉ\n‚Ä¢ Lo·∫°i b·ªè thu·ªëc l√° v√† d·ª•ng c·ª• h√∫t thu·ªëc\n‚Ä¢ Th√¥ng b√°o v·ªõi gia ƒë√¨nh v√† b·∫°n b√®\n‚Ä¢ Chu·∫©n b·ªã tinh th·∫ßn cho th·ª≠ th√°ch\n‚Ä¢ T√¨m hi·ªÉu v·ªÅ t√°c h·∫°i c·ªßa thu·ªëc l√°",
                durationDays: 7
            },
            {
                phaseName: "Tu·∫ßn 2 (Ng√†y 8-15): V∆∞·ª£t qua v√† duy tr√¨",
                phaseDescription: "‚Ä¢ S·ª≠ d·ª•ng k·ªπ thu·∫≠t th·ªü s√¢u khi th√®m thu·ªëc\n‚Ä¢ U·ªëng nhi·ªÅu n∆∞·ªõc v√† ƒÉn tr√°i c√¢y\n‚Ä¢ Tr√°nh xa nh·ªØng n∆°i th∆∞·ªùng h√∫t thu·ªëc\n‚Ä¢ T·∫≠p th·ªÉ d·ª•c nh·∫π nh√†ng\n‚Ä¢ T√¨m ho·∫°t ƒë·ªông thay th·∫ø\n‚Ä¢ C·ªßng c·ªë th√≥i quen t√≠ch c·ª±c\n‚Ä¢ ƒê√°nh gi√° ti·∫øn b·ªô ban ƒë·∫ßu",
                durationDays: 8
            }
        ]
    },
    'basic-gentle': {
        phases: [
            {
                phaseName: "Tu·∫ßn 1 (Ng√†y 1-7): L√†m quen v√† gi·∫£m d·∫ßn",
                phaseDescription: "‚Ä¢ Ghi ch√©p th√≥i quen h√∫t thu·ªëc hi·ªán t·∫°i\n‚Ä¢ Gi·∫£m 50% l∆∞·ª£ng thu·ªëc h√∫t m·ªói ng√†y\n‚Ä¢ U·ªëng n∆∞·ªõc khi mu·ªën h√∫t thu·ªëc\n‚Ä¢ Nhai k·∫πo cao su kh√¥ng ƒë∆∞·ªùng\n‚Ä¢ T·∫≠p th·ªü s√¢u 5 ph√∫t m·ªói ng√†y\n‚Ä¢ ƒêi b·ªô nh·∫π nh√†ng 15 ph√∫t sau b·ªØa ƒÉn"
            },
            {
                phaseName: "Tu·∫ßn 2 (Ng√†y 8-15): Ng·ª´ng ho√†n to√†n v√† thay th·∫ø",
                phaseDescription: "‚Ä¢ Ng·ª´ng h√∫t thu·ªëc ho√†n to√†n\n‚Ä¢ Thay th·∫ø b·∫±ng tr√† th·∫£o m·ªôc\n‚Ä¢ Nghe nh·∫°c th∆∞ gi√£n khi cƒÉng th·∫≥ng\n‚Ä¢ G·∫∑p g·ª° b·∫°n b√® kh√¥ng h√∫t thu·ªëc\n‚Ä¢ ƒÇn hoa qu·∫£ khi th√®m thu·ªëc\n‚Ä¢ T·ª± th∆∞·ªüng b·∫£n th√¢n khi ho√†n th√†nh m·ª•c ti√™u\n‚Ä¢ Chia s·∫ª v·ªõi ng∆∞·ªùi th√¢n v·ªÅ ti·∫øn b·ªô"
            }
        ]
    }
};

// GET /api/quit-plan - L·∫•y k·∫ø ho·∫°ch cai thu·ªëc hi·ªán t·∫°i c·ªßa user
router.get('/', auth, requireActivated, async (req, res) => {
    try {
        const userId = req.user.UserID;
        const userRole = req.user.Role;

        console.log('üìã GET /api/quit-plan - userId:', userId);

        // Check UserMembership thay v√¨ PaymentConfirmations
        let userMembership = null;
        try {
            const membershipQuery = `
                SELECT TOP 1 
                    um.MembershipID,
                    um.UserID,
                    um.PlanID,
                    um.StartDate,
                    um.EndDate,
                    um.Status,
                    mp.Name as PlanName,
                    mp.Description as PlanDescription,
                    mp.Price,
                    mp.Duration as PlanDuration
                FROM UserMemberships um
                JOIN MembershipPlans mp ON um.PlanID = mp.PlanID
                WHERE um.UserID = @UserID 
                AND um.Status IN ('active', 'confirmed')
                ORDER BY um.EndDate DESC
            `;

            const membershipResult = await pool.request()
                .input('UserID', userId)
                .query(membershipQuery);

            if (membershipResult.recordset.length > 0) {
                userMembership = membershipResult.recordset[0];
                console.log('üìã User membership found:', userMembership);
            } else {
                console.log('üìã No active membership found for user');
            }
        } catch (err) {
            console.log('üìã Error checking user membership:', err.message);
        }

        // L·∫•y QuitPlans c·ªßa user (kh√¥ng filter theo membership n·ªØa ƒë·ªÉ l·∫•y h·∫øt data)
        let query = `
            SELECT 
                PlanID,
                UserID,
                StartDate,
                TargetDate,
                Reason,
                MotivationLevel,
                DetailedPlan,
                Status,
                CreatedAt,
                MembershipID
            FROM QuitPlans 
            WHERE UserID = @UserID
            AND Status = 'active'
            ORDER BY CreatedAt DESC
        `;

        const result = await pool.request()
            .input('UserID', userId)
            .query(query);

        console.log('üìã Quit plans found:', result.recordset.length);

        // L·∫•y k·∫ø ho·∫°ch m·∫´u theo membership c·ªßa user
        let templateQuery = '';
        let templateResult = { recordset: [] };

        if (userMembership) {
            // User c√≥ membership - l·∫•y template c·ªßa g√≥i ƒë√£ ƒëƒÉng k√Ω
            templateQuery = `
                SELECT 
                    pt.TemplateID,
                    pt.PhaseName,
                    pt.PhaseDescription,
                    pt.DurationDays,
                    pt.SortOrder,
                    mp.Name as PlanName,
                    mp.Description as PlanDescription,
                    mp.PlanID,
                    mp.Duration as PlanDuration
                FROM PlanTemplates pt
                JOIN MembershipPlans mp ON pt.PlanID = mp.PlanID
                WHERE mp.PlanID = @PlanID
                ORDER BY pt.SortOrder
            `;

            templateResult = await pool.request()
                .input('PlanID', userMembership.PlanID)
                .query(templateQuery);

            console.log('üìã User has active membership - showing specific plan templates');
        } else {
            console.log('üìã User has no active membership - no plan templates available');
        }

        console.log('üìã Plan templates found:', templateResult.recordset.length);

        // Return data v·ªõi userMembership thay v√¨ paymentInfo
        const responseData = {
            success: true,
            data: result.recordset || [],
            paymentInfo: userMembership, // ƒê·ªïi t√™n ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi frontend
            planTemplate: templateResult.recordset || []
        };

        console.log('üìã Sending response:', JSON.stringify(responseData, null, 2));

        // Force fresh response
        res.set({
            'Cache-Control': 'no-cache, no-store, must-revalidate',
            'Pragma': 'no-cache',
            'Expires': '0'
        });

        res.status(200).json(responseData);
    } catch (error) {
        console.error('‚ùå Error fetching quit plan:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi l·∫•y k·∫ø ho·∫°ch cai thu·ªëc',
            error: error.message
        });
    }
});

// GET /api/quit-plan/template/:planId - L·∫•y k·∫ø ho·∫°ch m·∫´u theo g√≥i c·ª• th·ªÉ
router.get('/template/:planId', async (req, res) => {
    try {
        const planId = req.params.planId;

        const templateQuery = `
            SELECT 
                pt.TemplateID,
                pt.PhaseName,
                pt.PhaseDescription,
                pt.DurationDays,
                pt.SortOrder,
                mp.Name as PlanName,
                mp.Description as PlanDescription,
                mp.Price,
                mp.Duration as PlanDuration
            FROM PlanTemplates pt
            JOIN MembershipPlans mp ON pt.PlanID = mp.PlanID
            WHERE pt.PlanID = @PlanID
            ORDER BY pt.SortOrder
        `;

        const result = await pool.request()
            .input('PlanID', planId)
            .query(templateQuery);

        if (result.recordset.length === 0) {
            return res.status(404).json({
                success: false,
                message: 'Kh√¥ng t√¨m th·∫•y k·∫ø ho·∫°ch m·∫´u cho g√≥i n√†y'
            });
        }

        res.json({
            success: true,
            data: result.recordset,
            planInfo: {
                planId: planId,
                planName: result.recordset[0].PlanName,
                planDescription: result.recordset[0].PlanDescription,
                price: result.recordset[0].Price,
                duration: result.recordset[0].PlanDuration
            }
        });
    } catch (error) {
        console.error('Error fetching plan template:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi l·∫•y k·∫ø ho·∫°ch m·∫´u'
        });
    }
});

// GET /api/quit-plan/templates/all - L·∫•y t·∫•t c·∫£ k·∫ø ho·∫°ch m·∫´u cho t·∫•t c·∫£ g√≥i
router.get('/templates/all', async (req, res) => {
    try {
        console.log('üìã Getting all plan templates...');

        const query = `
            SELECT 
                pt.TemplateID,
                pt.PlanID,
                pt.PhaseName,
                pt.PhaseDescription,
                pt.DurationDays,
                pt.SortOrder,
                mp.Name as PlanName,
                mp.Description as PlanDescription,
                mp.Price,
                mp.Duration as PlanDuration
            FROM PlanTemplates pt
            JOIN MembershipPlans mp ON pt.PlanID = mp.PlanID
            ORDER BY pt.PlanID, pt.SortOrder
        `;

        const result = await pool.request().query(query);
        console.log(`‚úÖ Found ${result.recordset.length} templates`);

        if (result.recordset.length === 0) {
            return res.json({
                success: true,
                data: [],
                totalTemplates: 0,
                message: 'Ch∆∞a c√≥ k·∫ø ho·∫°ch m·∫´u n√†o'
            });
        }

        // Group by plan
        const groupedByPlan = result.recordset.reduce((acc, item) => {
            const planKey = item.PlanID;
            if (!acc[planKey]) {
                acc[planKey] = {
                    planInfo: {
                        planId: item.PlanID,
                        planName: item.PlanName,
                        planDescription: item.PlanDescription,
                        price: item.Price,
                        duration: item.PlanDuration
                    },
                    phases: []
                };
            }
            acc[planKey].phases.push({
                templateId: item.TemplateID,
                phaseName: item.PhaseName,
                phaseDescription: item.PhaseDescription,
                durationDays: item.DurationDays,
                sortOrder: item.SortOrder
            });
            return acc;
        }, {});

        res.json({
            success: true,
            data: Object.values(groupedByPlan),
            totalTemplates: result.recordset.length,
            message: 'L·∫•y k·∫ø ho·∫°ch m·∫´u th√†nh c√¥ng'
        });
    } catch (error) {
        console.error('‚ùå Error fetching all templates:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi l·∫•y t·∫•t c·∫£ k·∫ø ho·∫°ch m·∫´u',
            error: error.message,
            details: process.env.NODE_ENV === 'development' ? error.stack : undefined
        });
    }
});

// POST /api/quit-plan - T·∫°o k·∫ø ho·∫°ch cai thu·ªëc m·ªõi
router.post('/', auth, requireActivated, async (req, res) => {
    try {
        console.log('üî• POST /api/quit-plan - Request received!');
        console.log('üî• Headers:', req.headers);
        console.log('üî• User:', req.user);
        console.log('üî• Body:', req.body);

        const userId = req.user.UserID;
        const userRole = req.user.Role;
        const { 
            startDate, 
            targetDate, 
            reason, 
            motivationLevel, 
            detailedPlan,
            templateId // Th√™m templateId
        } = req.body;

        console.log('üìù Creating quit plan for user:', userId, 'role:', userRole);
        console.log('üìã Request body:', req.body);

        // Check UserMembership access (but don't block for coaches/admins)
        let hasMembershipAccess = false;
        if (['coach', 'admin'].includes(userRole)) {
            hasMembershipAccess = true;
            console.log('üìã Coach/Admin bypassing membership check');
        } else {
            try {
                const membershipQuery = `
                    SELECT TOP 1 um.MembershipID
                    FROM UserMemberships um
                    WHERE um.UserID = @UserID 
                    AND um.Status IN ('active', 'confirmed')
                    AND um.EndDate > GETDATE()
                    ORDER BY um.EndDate DESC
                `;

                const membershipResult = await pool.request()
                    .input('UserID', userId)
                    .query(membershipQuery);

                hasMembershipAccess = membershipResult.recordset.length > 0;
                console.log('üìã Membership access check result:', hasMembershipAccess);
            } catch (membershipError) {
                console.log('üìã Membership check error (proceeding anyway):', membershipError.message);
                hasMembershipAccess = false;
            }
        }

        // Allow creation even without membership (with limited features)
        if (!hasMembershipAccess) {
            console.log('üìã User has no active membership - allowing basic plan creation');
        }

        // Validation
        if (!startDate || !targetDate || !reason || motivationLevel === undefined || motivationLevel === null) {
            console.log('‚ùå Validation failed - missing required fields');
            return res.status(400).json({
                success: false,
                message: 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc (ng√†y b·∫Øt ƒë·∫ßu, ng√†y m·ª•c ti√™u, l√Ω do, m·ª©c ƒë·ªô ƒë·ªông l·ª±c)'
            });
        }

        if (motivationLevel < 1 || motivationLevel > 10) {
            console.log('‚ùå Validation failed - invalid motivation level:', motivationLevel);
            return res.status(400).json({
                success: false,
                message: 'M·ª©c ƒë·ªô ƒë·ªông l·ª±c ph·∫£i t·ª´ 1 ƒë·∫øn 10'
            });
        }

        // Ki·ªÉm tra ng√†y h·ª£p l·ªá
        const start = new Date(startDate);
        const target = new Date(targetDate);

        if (isNaN(start.getTime()) || isNaN(target.getTime())) {
            console.log('‚ùå Validation failed - invalid dates:', { startDate, targetDate });
            return res.status(400).json({
                success: false,
                message: 'Ng√†y kh√¥ng h·ª£p l·ªá'
            });
        }

        if (target <= start) {
            console.log('‚ùå Validation failed - target date before start date');
            return res.status(400).json({
                success: false,
                message: 'Ng√†y m·ª•c ti√™u ph·∫£i sau ng√†y b·∫Øt ƒë·∫ßu'
            });
        }

        console.log('‚úÖ All validations passed');

        // T√¨m membership ID v√† plan name
        let currentMembershipID = null;
        let userPlanName = null;
        
        const membershipQuery = `
            SELECT TOP 1 
                um.MembershipID,
                um.UserID,
                um.PlanID,
                um.StartDate,
                um.EndDate,
                um.Status,
                mp.Name as PlanName
            FROM UserMemberships um
            INNER JOIN MembershipPlans mp ON um.PlanID = mp.PlanID
            WHERE um.UserID = @UserID 
            AND um.Status IN ('active', 'confirmed')
            ORDER BY um.EndDate DESC
        `;

        const membershipResult = await pool.request()
            .input('UserID', userId)
            .query(membershipQuery);

        if (membershipResult.recordset.length > 0) {
            currentMembershipID = membershipResult.recordset[0].MembershipID;
            userPlanName = membershipResult.recordset[0].PlanName;
            console.log('üìã Found membership:', membershipResult.recordset[0]);
        } else {
            console.log('üìã No active membership found');
        }

        // T·ª± ƒë·ªông ch·ªçn template d·ª±a tr√™n templateId tr∆∞·ªõc
        let selectedTemplate = templates.basic; // Default
        let templateName = 'basic';

        // B∆Ø·ªöC 1: ∆Øu ti√™n templateId t·ª´ frontend
        if (templateId && templates[templateId]) {
            selectedTemplate = templates[templateId];
            templateName = templateId;
            console.log('üéØ Using template from frontend:', templateId);
        } 
        // B∆Ø·ªöC 2: Fallback detect t·ª´ Reason field
        else if (reason && typeof reason === 'string') {
            const reasonLower = reason.toLowerCase();
            
            if (reasonLower.includes('premium chuy√™n s√¢u') || reasonLower.includes('premium intensive')) {
                selectedTemplate = templates['premium-intensive'];
                templateName = 'premium-intensive';
                console.log('üéØ Detected template from Reason: premium-intensive');
            } else if (reasonLower.includes('premium')) {
                selectedTemplate = templates.premium;
                templateName = 'premium';
                console.log('üéØ Detected template from Reason: premium');
            } else if (reasonLower.includes('basic nh·∫π nh√†ng') || reasonLower.includes('basic gentle')) {
                selectedTemplate = templates['basic-gentle'];
                templateName = 'basic-gentle';
                console.log('üéØ Detected template from Reason: basic-gentle');
            } else if (reasonLower.includes('basic') || reasonLower.includes('c∆° b·∫£n')) {
                selectedTemplate = templates.basic;
                templateName = 'basic';
                console.log('üéØ Detected template from Reason: basic');
            }
        } 
        // B∆Ø·ªöC 3: Fallback d·ª±a v√†o membership (ch·ªâ khi kh√¥ng detect ƒë∆∞·ª£c)
        else if (userPlanName) {
            const planNameLower = userPlanName.toLowerCase();
            if (planNameLower.includes('premium') || planNameLower.includes('cao c·∫•p')) {
                selectedTemplate = templates.premium;
                templateName = 'premium';
                console.log('üéØ Using Premium template from membership:', userPlanName);
            } else if (planNameLower.includes('basic') || planNameLower.includes('c∆° b·∫£n')) {
                selectedTemplate = templates.basic;
                templateName = 'basic';
                console.log('üéØ Using Basic template from membership:', userPlanName);
            }
        }

        console.log('üéØ Final selected template:', templateName);

        // Generate DetailedPlan t·ª´ template
        let autoGeneratedDetailedPlan = '';
        
        if (selectedTemplate && selectedTemplate.phases) {
            // Th√™m template ID v√†o ƒë·∫ßu DetailedPlan
            const templateHeader = `[TEMPLATE_ID:${templateName}]\n\n`;
            autoGeneratedDetailedPlan = templateHeader + selectedTemplate.phases.map((phase, index) => 
                `${phase.phaseName}:\n${phase.phaseDescription}\n`
            ).join('\n');
            
            console.log(`üéØ Auto-generated DetailedPlan with template ID: ${templateName}`);
        }

        // S·ª≠ d·ª•ng DetailedPlan t·ª´ request ho·∫∑c auto-generated
        const finalDetailedPlan = detailedPlan || autoGeneratedDetailedPlan;

        // H·ªßy k·∫ø ho·∫°ch active hi·ªán t·∫°i (n·∫øu c√≥)
        const cancelResult = await pool.request()
            .input('UserID', userId)
            .query(`
                UPDATE QuitPlans 
                SET Status = 'cancelled' 
                WHERE UserID = @UserID AND Status = 'active'
            `);

        console.log('üìã Cancelled existing active plans:', cancelResult.rowsAffected);

        // T·∫°o k·∫ø ho·∫°ch m·ªõi v·ªõi MembershipID (ho·∫∑c null n·∫øu kh√¥ng c√≥)
        let insertQuery;
        const request = pool.request()
            .input('UserID', userId)
            .input('StartDate', start)
            .input('TargetDate', target)
            .input('Reason', reason)
            .input('MotivationLevel', motivationLevel)
            .input('DetailedPlan', finalDetailedPlan);

        if (currentMembershipID) {
            insertQuery = `
                INSERT INTO QuitPlans (UserID, MembershipID, StartDate, TargetDate, Reason, MotivationLevel, DetailedPlan, Status, CreatedAt, UpdatedAt)
                OUTPUT INSERTED.PlanID
                VALUES (@UserID, @MembershipID, @StartDate, @TargetDate, @Reason, @MotivationLevel, @DetailedPlan, 'active', GETDATE(), GETDATE())
            `;
            request.input('MembershipID', currentMembershipID);
            console.log('‚úÖ Creating quit plan with membership ID:', currentMembershipID);
        } else {
            insertQuery = `
                INSERT INTO QuitPlans (UserID, StartDate, TargetDate, Reason, MotivationLevel, DetailedPlan, Status, CreatedAt, UpdatedAt)
                OUTPUT INSERTED.PlanID
                VALUES (@UserID, @StartDate, @TargetDate, @Reason, @MotivationLevel, @DetailedPlan, 'active', GETDATE(), GETDATE())
            `;
            console.log('‚ö†Ô∏è Creating quit plan without membership ID');
        }

        console.log('üîç About to execute query with DetailedPlan length:', finalDetailedPlan.length);

        let result;
        try {
            result = await request.query(insertQuery);
            console.log('‚úÖ Query executed successfully');
        } catch (dbError) {
            console.error('‚ùå Database query failed:', dbError);
            throw dbError;
        }

        const newPlanId = result.recordset[0].PlanID;
        console.log('‚úÖ Created new quit plan with ID:', newPlanId);

        // L·∫•y th√¥ng tin k·∫ø ho·∫°ch v·ª´a t·∫°o
        const selectQuery = `
            SELECT 
                PlanID,
                UserID,
                StartDate,
                TargetDate,
                Reason,
                MotivationLevel,
                DetailedPlan,
                Status,
                CreatedAt,
                MembershipID
            FROM QuitPlans 
            WHERE PlanID = @PlanID
        `;

        const newPlanResult = await pool.request()
            .input('PlanID', newPlanId)
            .query(selectQuery);

        console.log('‚úÖ Successfully created quit plan with auto-generated DetailedPlan');

        res.status(201).json({
            success: true,
            message: 'K·∫ø ho·∫°ch cai thu·ªëc ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
            data: newPlanResult.recordset[0],
            templateUsed: templateName // Th√™m th√¥ng tin template ƒë√£ s·ª≠ d·ª•ng
        });
    } catch (error) {
        console.error('‚ùå Error creating quit plan:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi t·∫°o k·∫ø ho·∫°ch cai thu·ªëc: ' + error.message
        });
    }
});

// PUT /api/quit-plan/:planId - C·∫≠p nh·∫≠t k·∫ø ho·∫°ch cai thu·ªëc (cho user ho·∫∑c coach)
router.put('/:planId', auth, requireActivated, async (req, res) => {
    try {
        const userId = req.user.UserID;
        const userRole = req.user.Role;
        const planId = req.params.planId;
        const { startDate, targetDate, reason, motivationLevel, detailedPlan, status } = req.body;

        // Ki·ªÉm tra k·∫ø ho·∫°ch t·ªìn t·∫°i
        const existingPlanQuery = `
            SELECT * FROM QuitPlans WHERE PlanID = @PlanID
        `;

        const existingPlan = await pool.request()
            .input('PlanID', planId)
            .query(existingPlanQuery);

        if (existingPlan.recordset.length === 0) {
            return res.status(404).json({
                success: false,
                message: 'Kh√¥ng t√¨m th·∫•y k·∫ø ho·∫°ch cai thu·ªëc'
            });
        }

        const plan = existingPlan.recordset[0];

        // Ki·ªÉm tra quy·ªÅn: user ch·ªâ ƒë∆∞·ª£c s·ª≠a k·∫ø ho·∫°ch c·ªßa m√¨nh, coach c√≥ th·ªÉ s·ª≠a t·∫•t c·∫£
        if (userRole !== 'coach' && userRole !== 'admin' && plan.UserID !== userId) {
            return res.status(403).json({
                success: false,
                message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠a k·∫ø ho·∫°ch n√†y'
            });
        }

        // Validation cho user th∆∞·ªùng (kh√¥ng ph·∫£i coach)
        if (userRole !== 'coach' && userRole !== 'admin') {
            // Ki·ªÉm tra membership access
            const membershipQuery = `
                SELECT TOP 1 um.MembershipID
                FROM UserMemberships um
                WHERE um.UserID = @UserID 
                AND um.Status IN ('active', 'confirmed')
                AND um.EndDate > GETDATE()
                ORDER BY um.EndDate DESC
            `;

            const membershipResult = await pool.request()
                .input('UserID', userId)
                .query(membershipQuery);

            if (membershipResult.recordset.length === 0) {
                return res.status(403).json({
                    success: false,
                    message: 'B·∫°n c·∫ßn c√≥ membership active ƒë·ªÉ s·ª≠a k·∫ø ho·∫°ch'
                });
            }
        }

        // Chu·∫©n b·ªã c√¢u l·ªánh UPDATE
        let updateFields = [];
        let inputs = { PlanID: planId };

        if (startDate) {
            updateFields.push('StartDate = @StartDate');
            inputs.StartDate = new Date(startDate);
        }

        if (targetDate) {
            updateFields.push('TargetDate = @TargetDate');
            inputs.TargetDate = new Date(targetDate);

            // Ki·ªÉm tra ng√†y h·ª£p l·ªá
            if (startDate && new Date(targetDate) <= new Date(startDate)) {
                return res.status(400).json({
                    success: false,
                    message: 'Ng√†y m·ª•c ti√™u ph·∫£i sau ng√†y b·∫Øt ƒë·∫ßu'
                });
            }

            // Ki·ªÉm tra ng√†y m·ª•c ti√™u ph·∫£i n·∫±m trong th·ªùi h·∫°n membership (ch·ªâ cho user th∆∞·ªùng)
            if (userRole !== 'coach' && userRole !== 'admin') {
                const membershipQuery = `
                    SELECT um.EndDate 
                    FROM UserMemberships um
                    WHERE um.UserID = @UserID 
                    AND um.Status IN ('active', 'confirmed') 
                    AND um.EndDate > GETDATE()
                    ORDER BY um.EndDate DESC
                `;
                const membershipResult = await pool.request()
                    .input('UserID', plan.UserID)
                    .query(membershipQuery);

                if (membershipResult.recordset.length > 0) {
                    const membershipEndDate = new Date(membershipResult.recordset[0].EndDate);
                    if (new Date(targetDate) > membershipEndDate) {
                        return res.status(400).json({
                            success: false,
                            message: `Ng√†y m·ª•c ti√™u kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° th·ªùi h·∫°n g√≥i d·ªãch v·ª• (${membershipEndDate.toLocaleDateString('vi-VN')})`
                        });
                    }
                }
            }
        }

        if (reason) {
            updateFields.push('Reason = @Reason');
            inputs.Reason = reason;
        }

        if (motivationLevel) {
            if (motivationLevel < 1 || motivationLevel > 10) {
                return res.status(400).json({
                    success: false,
                    message: 'M·ª©c ƒë·ªô ƒë·ªông l·ª±c ph·∫£i t·ª´ 1 ƒë·∫øn 10'
                });
            }
            updateFields.push('MotivationLevel = @MotivationLevel');
            inputs.MotivationLevel = motivationLevel;
        }

        if (detailedPlan !== undefined) {
            updateFields.push('DetailedPlan = @DetailedPlan');
            inputs.DetailedPlan = detailedPlan;
        }

        // Coach c√≥ th·ªÉ thay ƒë·ªïi status
        if (status && (userRole === 'coach' || userRole === 'admin')) {
            if (!['active', 'completed', 'cancelled'].includes(status)) {
                return res.status(400).json({
                    success: false,
                    message: 'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá'
                });
            }
            updateFields.push('Status = @Status');
            inputs.Status = status;
        }

        if (updateFields.length === 0) {
            return res.status(400).json({
                success: false,
                message: 'Kh√¥ng c√≥ th√¥ng tin n√†o ƒë·ªÉ c·∫≠p nh·∫≠t'
            });
        }

        // Th√™m UpdatedAt
        updateFields.push('UpdatedAt = GETDATE()');

        // Th·ª±c hi·ªán UPDATE
        const updateQuery = `
            UPDATE QuitPlans 
            SET ${updateFields.join(', ')}
            WHERE PlanID = @PlanID
        `;

        const request = pool.request();
        Object.keys(inputs).forEach(key => {
            request.input(key, inputs[key]);
        });

        await request.query(updateQuery);

        // L·∫•y th√¥ng tin k·∫ø ho·∫°ch ƒë√£ c·∫≠p nh·∫≠t
        const updatedPlanResult = await pool.request()
            .input('PlanID', planId)
            .query(`
                SELECT 
                    PlanID,
                    UserID,
                    StartDate,
                    TargetDate,
                    Reason,
                    MotivationLevel,
                    DetailedPlan,
                    Status,
                    CreatedAt,
                    MembershipID,
                    UpdatedAt
                FROM QuitPlans 
                WHERE PlanID = @PlanID
            `);

        res.json({
            success: true,
            message: 'K·∫ø ho·∫°ch cai thu·ªëc ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng',
            data: updatedPlanResult.recordset[0]
        });
    } catch (error) {
        console.error('Error updating quit plan:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi c·∫≠p nh·∫≠t k·∫ø ho·∫°ch cai thu·ªëc'
        });
    }
});

// GET /api/quit-plan/all - L·∫•y t·∫•t c·∫£ k·∫ø ho·∫°ch (ch·ªâ cho coach/admin)
router.get('/all', auth, requireActivated, async (req, res) => {
    try {
        const userRole = req.user.Role;

        if (!['coach', 'admin'].includes(userRole)) {
            return res.status(403).json({
                success: false,
                message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p t√≠nh nƒÉng n√†y'
            });
        }

        const query = `
            SELECT 
                qp.PlanID,
                qp.UserID,
                qp.StartDate,
                qp.TargetDate,
                qp.Reason,
                qp.MotivationLevel,
                qp.DetailedPlan,
                qp.Status,
                qp.CreatedAt,
                qp.MembershipID,
                u.FirstName + ' ' + u.LastName as UserName,
                u.Email as UserEmail
            FROM QuitPlans qp
            JOIN Users u ON qp.UserID = u.UserID
            ORDER BY qp.CreatedAt DESC
        `;

        const result = await pool.request().query(query);

        res.json({
            success: true,
            data: result.recordset
        });
    } catch (error) {
        console.error('Error fetching all quit plans:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi l·∫•y danh s√°ch k·∫ø ho·∫°ch'
        });
    }
});

// POST /api/quit-plan/populate-templates - Populate DetailedPlan cho c√°c k·∫ø ho·∫°ch ƒëang tr·ªëng
router.post('/populate-templates', auth, requireActivated, async (req, res) => {
    try {
        const userRole = req.user.Role;

        // Ch·ªâ admin m·ªõi ƒë∆∞·ª£c s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y
        if (userRole !== 'admin') {
            return res.status(403).json({
                success: false,
                message: 'Ch·ªâ admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y'
            });
        }

        console.log('üîß Starting template population for empty DetailedPlan...');

        // L·∫•y t·∫•t c·∫£ k·∫ø ho·∫°ch c√≥ DetailedPlan tr·ªëng
        const emptyPlansQuery = `
            SELECT 
                qp.PlanID,
                qp.UserID,
                qp.MembershipID,
                qp.StartDate,
                qp.TargetDate,
                qp.Reason,
                qp.MotivationLevel,
                qp.Status,
                um.PlanID as UserPlanID,
                mp.Name as PlanName
            FROM QuitPlans qp
            LEFT JOIN UserMemberships um ON qp.MembershipID = um.MembershipID
            LEFT JOIN MembershipPlans mp ON um.PlanID = mp.PlanID
            WHERE (qp.DetailedPlan IS NULL OR qp.DetailedPlan = '')
            AND qp.Status = 'active'
        `;

        const emptyPlansResult = await pool.request().query(emptyPlansQuery);
        const emptyPlans = emptyPlansResult.recordset;

        console.log(`üìã Found ${emptyPlans.length} plans with empty DetailedPlan`);

        if (emptyPlans.length === 0) {
            return res.json({
                success: true,
                message: 'Kh√¥ng c√≥ k·∫ø ho·∫°ch n√†o c·∫ßn c·∫≠p nh·∫≠t DetailedPlan',
                data: { updated: 0 }
            });
        }

        let updatedCount = 0;

        // X·ª≠ l√Ω t·ª´ng k·∫ø ho·∫°ch
        for (const plan of emptyPlans) {
            try {
                let selectedTemplate = null;
                let templateKey = 'basic'; // Default template

                // X√°c ƒë·ªãnh template d·ª±a v√†o PlanName
                if (plan.PlanName) {
                    const planName = plan.PlanName.toLowerCase();
                    if (planName.includes('premium') || planName.includes('cao c·∫•p')) {
                        templateKey = 'premium';
                    } else if (planName.includes('basic') || planName.includes('c∆° b·∫£n')) {
                        templateKey = 'basic';
                    }
                }

                selectedTemplate = templates[templateKey];

                if (!selectedTemplate) {
                    console.log(`‚ö†Ô∏è No template found for plan ${plan.PlanID}, using basic template`);
                    selectedTemplate = templates['basic'];
                }

                // T·∫°o DetailedPlan t·ª´ template
                const detailedPlanText = selectedTemplate.phases.map((phase, index) => 
                    `${phase.phaseName}:\n${phase.phaseDescription}\n`
                ).join('\n');

                // Update DetailedPlan
                await pool.request()
                    .input('PlanID', plan.PlanID)
                    .input('DetailedPlan', detailedPlanText)
                    .query(`
                        UPDATE QuitPlans 
                        SET DetailedPlan = @DetailedPlan, UpdatedAt = GETDATE()
                        WHERE PlanID = @PlanID
                    `);

                updatedCount++;
                console.log(`‚úÖ Updated plan ${plan.PlanID} with ${templateKey} template`);

            } catch (error) {
                console.error(`‚ùå Error updating plan ${plan.PlanID}:`, error);
            }
        }

        console.log(`üéâ Template population completed. Updated ${updatedCount}/${emptyPlans.length} plans`);

        res.json({
            success: true,
            message: `ƒê√£ c·∫≠p nh·∫≠t DetailedPlan cho ${updatedCount} k·∫ø ho·∫°ch`,
            data: { 
                updated: updatedCount, 
                total: emptyPlans.length 
            }
        });

    } catch (error) {
        console.error('‚ùå Error populating templates:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi populate templates: ' + error.message
        });
    }
});

module.exports = router; 