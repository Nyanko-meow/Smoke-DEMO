import React, { useState, useEffect } from 'react';
import {
    Table,
    Card,
    Button,
    Input,
    Space,
    Tag,
    Avatar,
    Row,
    Col,
    Statistic,
    Modal,
    Typography,
    Form,
    InputNumber,
    Select,
    Upload,
    message,
    Tooltip,
    Popconfirm,
    Divider,
    Badge,
    Progress,
    Switch,
    Spin,
    Alert
} from 'antd';
import {
    SearchOutlined,
    ReloadOutlined,
    EyeOutlined,
    DeleteOutlined,
    EditOutlined,
    PlusOutlined,
    TrophyOutlined,
    UserOutlined,
    UploadOutlined,
    StarOutlined,
    CrownOutlined,
    CalendarOutlined,
    DollarOutlined,
    TeamOutlined,
    CheckCircleOutlined,
    CloseCircleOutlined
} from '@ant-design/icons';
import moment from 'moment';
import axios from 'axios';
import './AchievementManagement.css';

const { Text, Paragraph, Title } = Typography;
const { Option } = Select;

const AchievementManagement = () => {
    // Test fallback ƒë·ªÉ debug
    const [debugMode] = useState(false); // T·∫Øt debug mode

    if (debugMode) {
        return (
            <div style={{ padding: '24px' }}>
                <Alert
                    message="Debug Mode - Testing Phase 1"
                    description="AchievementManagement component ƒë√£ load th√†nh c√¥ng!"
                    type="success"
                    showIcon
                />
                <Title level={2}>
                    <TrophyOutlined /> Test Achievement Management
                </Title>
                <p>B√¢y gi·ªù t√¥i s·∫Ω test t·ª´ng ph·∫ßn ƒë·ªÉ t√¨m l·ªói...</p>

                {/* Test basic states */}
                <Card style={{ marginTop: '16px' }}>
                    <h3>Test States:</h3>
                    <p>Loading: false</p>
                    <p>Achievements: []</p>
                    <p>Error: null</p>
                </Card>
            </div>
        );
    }

    const [loading, setLoading] = useState(false);
    const [achievements, setAchievements] = useState([]);
    const [filteredAchievements, setFilteredAchievements] = useState([]);
    const [selectedAchievement, setSelectedAchievement] = useState(null);
    const [detailModalVisible, setDetailModalVisible] = useState(false);
    const [createModalVisible, setCreateModalVisible] = useState(false);
    const [editModalVisible, setEditModalVisible] = useState(false);
    const [resetModalVisible, setResetModalVisible] = useState(false);
    const [users, setUsers] = useState([]);
    const [selectedUser, setSelectedUser] = useState(null);
    const [userAchievements, setUserAchievements] = useState([]);
    const [error, setError] = useState(null);

    // Th√™m state ƒë·ªÉ theo d√µi category ƒë∆∞·ª£c ch·ªçn trong form
    const [selectedCategoryCreate, setSelectedCategoryCreate] = useState('');
    const [selectedCategoryEdit, setSelectedCategoryEdit] = useState('');

    const [stats, setStats] = useState({
        totalAchievements: 0,
        activeAchievements: 0,
        totalUsersWithAchievements: 0,
        mostEarnedAchievement: null,
        categoryStats: []
    });
    const [searchText, setSearchText] = useState('');
    const [filterCategory, setFilterCategory] = useState('');
    const [filterDifficulty, setFilterDifficulty] = useState('');

    const [createForm] = Form.useForm();
    const [editForm] = Form.useForm();

    const categories = ['milestone', 'savings'];
    const difficulties = [1, 2, 3, 4, 5];

    useEffect(() => {
        console.log('üöÄ AchievementManagement component mounted');
        try {
            loadAchievements();
            loadUsers();
            loadAchievementStats();
        } catch (error) {
            console.error('‚ùå Error in useEffect:', error);
            setError('L·ªói kh·ªüi t·∫°o component: ' + error.message);
        }
    }, []);

    useEffect(() => {
        try {
            applyFilters();
        } catch (error) {
            console.error('‚ùå Error in filter effect:', error);
        }
    }, [achievements, searchText, filterCategory, filterDifficulty]);

    const loadAchievements = async () => {
        try {
            console.log('üì• Loading achievements...');
            setLoading(true);
            setError(null);

            const token = localStorage.getItem('adminToken');
            console.log('üîë Admin token:', token ? 'Found' : 'Not found');

            if (!token) {
                throw new Error('Kh√¥ng t√¨m th·∫•y token admin. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
            }

            const response = await axios.get('http://localhost:4000/api/achievements/public');
            console.log('üìä Achievements response:', response.data);

            if (response.data.success) {
                setAchievements(response.data.data || []);
                console.log('‚úÖ Loaded achievements:', response.data.data?.length || 0);
            } else {
                throw new Error(response.data.message || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch th√†nh t√≠ch');
            }
        } catch (error) {
            console.error('‚ùå Error loading achievements:', error);
            const errorMessage = error.response?.data?.message || error.message || 'L·ªói khi t·∫£i danh s√°ch th√†nh t√≠ch';
            setError(errorMessage);
            message.error(errorMessage);
            // Set empty array ƒë·ªÉ tr√°nh crash
            setAchievements([]);
        } finally {
            setLoading(false);
        }
    };

    const loadUsers = async () => {
        try {
            console.log('üë• Loading users...');
            const token = localStorage.getItem('adminToken');

            if (!token) {
                console.warn('‚ö†Ô∏è No admin token for loading users');
                return;
            }

            const response = await axios.get('http://localhost:4000/api/admin/users', {
                headers: { 'Authorization': `Bearer ${token}` }
            });

            if (response.data.success) {
                setUsers(response.data.data || []);
                console.log('‚úÖ Loaded users:', response.data.data?.length || 0);
            } else {
                console.error('‚ùå Failed to load users:', response.data.message);
            }
        } catch (error) {
            console.error('‚ùå Error loading users:', error);
            // Don't show error message for users loading as it's not critical
            setUsers([]);
        }
    };

    const loadAchievementStats = async () => {
        try {
            console.log('üìà Loading achievement stats...');
            const token = localStorage.getItem('adminToken');

            // Get basic achievement stats
            const achievementResponse = await axios.get('http://localhost:4000/api/achievements/public');
            const achievements = achievementResponse.data.data || [];

            // Calculate stats (mock for now - you can implement proper endpoints)
            const statsData = {
                totalAchievements: achievements.length,
                activeAchievements: achievements.filter(a => a.IsActive).length,
                totalUsersWithAchievements: 0, // Need proper endpoint
                mostEarnedAchievement: achievements[0], // Need proper endpoint
                categoryStats: categories.map(cat => ({
                    category: cat,
                    count: achievements.filter(a => a.Category === cat).length
                }))
            };

            setStats(statsData);
            console.log('‚úÖ Loaded stats:', statsData);
        } catch (error) {
            console.error('‚ùå Error loading achievement stats:', error);
            // Don't crash, just use default stats
            setStats({
                totalAchievements: 0,
                activeAchievements: 0,
                totalUsersWithAchievements: 0,
                mostEarnedAchievement: null,
                categoryStats: []
            });
        }
    };

    const applyFilters = () => {
        try {
            console.log('üîç Applying filters...');
            let filtered = [...(achievements || [])];

            // Apply search filter
            if (searchText) {
                filtered = filtered.filter(achievement =>
                    achievement.Name?.toLowerCase().includes(searchText.toLowerCase()) ||
                    achievement.Description?.toLowerCase().includes(searchText.toLowerCase()) ||
                    achievement.Category?.toLowerCase().includes(searchText.toLowerCase())
                );
            }

            // Apply category filter
            if (filterCategory) {
                filtered = filtered.filter(achievement => achievement.Category === filterCategory);
            }

            // Apply difficulty filter
            if (filterDifficulty) {
                filtered = filtered.filter(achievement => achievement.Difficulty === parseInt(filterDifficulty));
            }

            setFilteredAchievements(filtered);
            console.log('‚úÖ Filtered results:', filtered.length);
        } catch (error) {
            console.error('‚ùå Error in applyFilters:', error);
            setFilteredAchievements([]);
        }
    };

    const handleCreateAchievement = async (values) => {
        try {
            const token = localStorage.getItem('adminToken');

            const response = await axios.post('http://localhost:4000/api/achievements', {
                name: values.name,
                description: values.description,
                iconURL: values.iconUrl,
                category: values.category,
                milestoneDays: values.milestoneDays,
                savedMoney: values.savedMoney,
                requiredPlan: values.requiredPlan,
                difficulty: values.difficulty,
                points: values.points
            }, {
                headers: { 'Authorization': `Bearer ${token}` }
            });

            if (response.data.success) {
                message.success('T·∫°o th√†nh t√≠ch m·ªõi th√†nh c√¥ng');
                setCreateModalVisible(false);
                setSelectedCategoryCreate('');
                createForm.resetFields();
                loadAchievements();
                loadAchievementStats();
            } else {
                message.error('Kh√¥ng th·ªÉ t·∫°o th√†nh t√≠ch m·ªõi');
            }
        } catch (error) {
            console.error('Error creating achievement:', error);
            message.error('L·ªói khi t·∫°o th√†nh t√≠ch m·ªõi');
        }
    };

    const handleEditAchievement = async (values) => {
        try {
            const token = localStorage.getItem('adminToken');

            const response = await axios.put(`http://localhost:4000/api/achievements/${selectedAchievement.AchievementID}`, {
                name: values.name,
                description: values.description,
                iconURL: values.iconUrl,
                category: values.category,
                milestoneDays: values.milestoneDays,
                savedMoney: values.savedMoney,
                requiredPlan: values.requiredPlan,
                difficulty: values.difficulty,
                points: values.points,
                isActive: values.isActive
            }, {
                headers: { 'Authorization': `Bearer ${token}` }
            });

            if (response.data.success) {
                message.success('C·∫≠p nh·∫≠t th√†nh t√≠ch th√†nh c√¥ng');
                setEditModalVisible(false);
                setSelectedCategoryEdit('');
                editForm.resetFields();
                loadAchievements();
                loadAchievementStats();
            } else {
                message.error('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√†nh t√≠ch');
            }
        } catch (error) {
            console.error('Error updating achievement:', error);
            message.error('L·ªói khi c·∫≠p nh·∫≠t th√†nh t√≠ch');
        }
    };

    const handleDeleteAchievement = async (achievementId) => {
        try {
            const token = localStorage.getItem('adminToken');

            const response = await axios.delete(`http://localhost:4000/api/achievements/${achievementId}`, {
                headers: { 'Authorization': `Bearer ${token}` }
            });

            if (response.data.success) {
                message.success('X√≥a th√†nh t√≠ch th√†nh c√¥ng');
                loadAchievements();
                loadAchievementStats();
            } else {
                message.error('Kh√¥ng th·ªÉ x√≥a th√†nh t√≠ch');
            }
        } catch (error) {
            console.error('Error deleting achievement:', error);
            message.error('L·ªói khi x√≥a th√†nh t√≠ch');
        }
    };

    const handleResetUserAchievements = async () => {
        if (!selectedUser) {
            message.error('Vui l√≤ng ch·ªçn ng∆∞·ªùi d√πng');
            return;
        }

        try {
            const token = localStorage.getItem('adminToken');

            const response = await axios.post(`http://localhost:4000/api/admin/reset-user-achievements`, {
                userId: selectedUser
            }, {
                headers: { 'Authorization': `Bearer ${token}` }
            });

            if (response.data.success) {
                message.success('Reset th√†nh t√≠ch ng∆∞·ªùi d√πng th√†nh c√¥ng');
                setResetModalVisible(false);
                setSelectedUser(null);
                loadUsers();
            } else {
                message.error('Kh√¥ng th·ªÉ reset th√†nh t√≠ch ng∆∞·ªùi d√πng');
            }
        } catch (error) {
            console.error('Error resetting user achievements:', error);
            message.error('L·ªói khi reset th√†nh t√≠ch ng∆∞·ªùi d√πng');
        }
    };

    const handleResetAllAchievements = async () => {
        try {
            const token = localStorage.getItem('adminToken');

            const response = await axios.post(`http://localhost:4000/api/admin/reset-all-achievements`, {}, {
                headers: { 'Authorization': `Bearer ${token}` }
            });

            if (response.data.success) {
                message.success('Reset t·∫•t c·∫£ th√†nh t√≠ch th√†nh c√¥ng');
                loadUsers();
            } else {
                message.error('Kh√¥ng th·ªÉ reset t·∫•t c·∫£ th√†nh t√≠ch');
            }
        } catch (error) {
            console.error('Error resetting all achievements:', error);
            message.error('L·ªói khi reset t·∫•t c·∫£ th√†nh t√≠ch');
        }
    };

    const loadUserAchievements = async (userId) => {
        try {
            const token = localStorage.getItem('adminToken');

            const response = await axios.get(`http://localhost:4000/api/admin/user-achievements/${userId}`, {
                headers: { 'Authorization': `Bearer ${token}` }
            });

            if (response.data.success) {
                setUserAchievements(response.data.data);
            }
        } catch (error) {
            console.error('Error loading user achievements:', error);
        }
    };

    const handleViewDetail = (achievement) => {
        setSelectedAchievement(achievement);
        setDetailModalVisible(true);
    };

    const handleEdit = (achievement) => {
        setSelectedAchievement(achievement);
        setSelectedCategoryEdit(achievement.Category);
        editForm.setFieldsValue({
            name: achievement.Name,
            description: achievement.Description,
            iconURL: achievement.IconURL,
            category: achievement.Category,
            milestoneDays: achievement.MilestoneDays,
            savedMoney: achievement.SavedMoney,
            requiredPlan: achievement.RequiredPlan,
            difficulty: achievement.Difficulty,
            points: achievement.Points,
            isActive: achievement.IsActive
        });
        setEditModalVisible(true);
    };

    const confirmDelete = (achievement) => {
        Modal.confirm({
            title: 'X√°c nh·∫≠n x√≥a th√†nh t√≠ch',
            content: `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a th√†nh t√≠ch "${achievement.Name}"?`,
            okText: 'X√≥a',
            okType: 'danger',
            cancelText: 'H·ªßy',
            onOk() {
                handleDeleteAchievement(achievement.AchievementID);
            },
        });
    };

    const getDifficultyColor = (difficulty) => {
        const colors = {
            1: 'green',
            2: 'blue',
            3: 'orange',
            4: 'red',
            5: 'purple'
        };
        return colors[difficulty] || 'default';
    };

    const getDifficultyText = (difficulty) => {
        const texts = {
            1: 'D·ªÖ',
            2: 'Trung b√¨nh',
            3: 'Kh√≥',
            4: 'R·∫•t kh√≥',
            5: 'Si√™u kh√≥'
        };
        return texts[difficulty] || 'Kh√¥ng x√°c ƒë·ªãnh';
    };

    const getCategoryIcon = (category) => {
        const icons = {
            milestone: <CalendarOutlined />,
            savings: <DollarOutlined />
        };
        return icons[category] || <TrophyOutlined />;
    };

    const getCategoryText = (category) => {
        const texts = {
            milestone: 'C·ªôt m·ªëc th·ªùi gian',
            savings: 'Ti·∫øt ki·ªám ti·ªÅn'
        };
        return texts[category] || category;
    };

    const columns = [
        {
            title: 'Th√†nh t√≠ch',
            dataIndex: 'Name',
            key: 'name',
            render: (text, record) => (
                <div className="achievement-item">
                    <Avatar
                        src={record.IconURL}
                        icon={<TrophyOutlined />}
                        size="small"
                        className="achievement-avatar"
                    />
                    <div className="achievement-info">
                        <h4>{text}</h4>
                        <p>
                            {record.Description?.substring(0, 50)}...
                        </p>
                    </div>
                </div>
            ),
        },
        {
            title: 'Danh m·ª•c',
            dataIndex: 'Category',
            key: 'category',
            render: (category) => (
                <Tag
                    icon={getCategoryIcon(category)}
                    className={`achievement-tag ${category}`}
                >
                    {getCategoryText(category)}
                </Tag>
            ),
            filters: [
                { text: 'C·ªôt m·ªëc th·ªùi gian', value: 'milestone' },
                { text: 'Ti·∫øt ki·ªám ti·ªÅn', value: 'savings' }
            ],
            onFilter: (value, record) => record.Category === value,
        },
        {
            title: 'ƒê·ªô kh√≥',
            dataIndex: 'Difficulty',
            key: 'difficulty',
            render: (difficulty) => {
                const difficultyClass = {
                    1: 'easy',
                    2: 'medium',
                    3: 'hard',
                    4: 'very-hard',
                    5: 'extreme'
                }[difficulty] || 'medium';

                return (
                    <div className={`achievement-difficulty-tag ${difficultyClass}`}>
                        {getDifficultyText(difficulty)}
                    </div>
                );
            },
            sorter: (a, b) => a.Difficulty - b.Difficulty,
        },
        {
            title: 'ƒêi·ªÉm th∆∞·ªüng',
            dataIndex: 'Points',
            key: 'points',
            render: (points) => (
                <div className="achievement-points">
                    {points} ƒëi·ªÉm
                </div>
            ),
            sorter: (a, b) => a.Points - b.Points,
        },
        {
            title: 'ƒêi·ªÅu ki·ªán',
            key: 'requirements',
            render: (_, record) => (
                <div className="achievement-requirements">
                    {record.MilestoneDays && (
                        <div className="achievement-requirement-tag">
                            üìÖ {record.MilestoneDays} ng√†y
                        </div>
                    )}
                    {record.SavedMoney && (
                        <div className="achievement-requirement-tag">
                            üí∞ {record.SavedMoney.toLocaleString()} VND
                        </div>
                    )}
                    {!record.MilestoneDays && !record.SavedMoney && (
                        <div className="achievement-requirement-tag">
                            ‚≠ê ƒê·∫∑c bi·ªát
                        </div>
                    )}
                </div>
            ),
        },
        {
            title: 'Tr·∫°ng th√°i',
            dataIndex: 'IsActive',
            key: 'isActive',
            render: (isActive) => (
                <Badge
                    status={isActive ? 'success' : 'error'}
                    text={isActive ? 'Ho·∫°t ƒë·ªông' : 'Kh√¥ng ho·∫°t ƒë·ªông'}
                />
            ),
        },
        {
            title: 'H√†nh ƒë·ªông',
            key: 'actions',
            render: (_, record) => (
                <Space>
                    <Tooltip title="Xem chi ti·∫øt">
                        <Button
                            type="text"
                            icon={<EyeOutlined />}
                            onClick={() => handleViewDetail(record)}
                            className="achievement-action-btn view"
                        />
                    </Tooltip>
                    <Tooltip title="Ch·ªânh s·ª≠a">
                        <Button
                            type="text"
                            icon={<EditOutlined />}
                            onClick={() => handleEdit(record)}
                            className="achievement-action-btn edit"
                        />
                    </Tooltip>
                    <Tooltip title="X√≥a">
                        <Button
                            type="text"
                            icon={<DeleteOutlined />}
                            onClick={() => confirmDelete(record)}
                            className="achievement-action-btn delete"
                        />
                    </Tooltip>
                </Space>
            ),
        },
    ];

    const renderCreateForm = () => (
        <Form
            form={createForm}
            layout="vertical"
            onFinish={handleCreateAchievement}
        >
            <Row gutter={16}>
                <Col span={12}>
                    <Form.Item
                        name="name"
                        label="T√™n th√†nh t√≠ch"
                        rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p t√™n th√†nh t√≠ch' }]}
                    >
                        <Input placeholder="Nh·∫≠p t√™n th√†nh t√≠ch" />
                    </Form.Item>
                </Col>
                <Col span={12}>
                    <Form.Item
                        name="category"
                        label="Danh m·ª•c"
                        rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn danh m·ª•c' }]}
                    >
                        <Select
                            placeholder="Ch·ªçn danh m·ª•c"
                            onChange={(value) => {
                                setSelectedCategoryCreate(value);
                                // Reset c√°c tr∆∞·ªùng ƒëi·ªÅu ki·ªán khi ƒë·ªïi danh m·ª•c
                                createForm.setFieldsValue({
                                    milestoneDays: undefined,
                                    savedMoney: undefined
                                });
                            }}
                        >
                            <Option value="milestone">C·ªôt m·ªëc th·ªùi gian</Option>
                            <Option value="savings">Ti·∫øt ki·ªám ti·ªÅn</Option>
                        </Select>
                    </Form.Item>
                </Col>
            </Row>

            <Form.Item
                name="description"
                label="M√¥ t·∫£"
                rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p m√¥ t·∫£' }]}
            >
                <Input.TextArea rows={3} placeholder="Nh·∫≠p m√¥ t·∫£ th√†nh t√≠ch" />
            </Form.Item>

            <Form.Item
                name="iconUrl"
                label="URL Icon"
                rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p URL icon' }]}
            >
                <Input placeholder="Nh·∫≠p URL icon th√†nh t√≠ch" />
            </Form.Item>

            <Row gutter={16}>
                <Col span={8}>
                    <Form.Item
                        name="difficulty"
                        label="ƒê·ªô kh√≥"
                        rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ƒë·ªô kh√≥' }]}
                    >
                        <Select placeholder="Ch·ªçn ƒë·ªô kh√≥">
                            {difficulties.map(diff => (
                                <Option key={diff} value={diff}>
                                    {getDifficultyText(diff)}
                                </Option>
                            ))}
                        </Select>
                    </Form.Item>
                </Col>
                <Col span={8}>
                    <Form.Item
                        name="points"
                        label="ƒêi·ªÉm th∆∞·ªüng"
                        rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p ƒëi·ªÉm th∆∞·ªüng' }]}
                    >
                        <InputNumber min={1} placeholder="ƒêi·ªÉm th∆∞·ªüng" style={{ width: '100%' }} />
                    </Form.Item>
                </Col>
                <Col span={8}>
                    <Form.Item
                        name="requiredPlan"
                        label="G√≥i y√™u c·∫ßu"
                    >
                        <Select placeholder="Ch·ªçn g√≥i (t√πy ch·ªçn)" allowClear>
                            <Option value="basic">Basic</Option>
                            <Option value="premium">Premium</Option>
                            <Option value="vip">VIP</Option>
                        </Select>
                    </Form.Item>
                </Col>
            </Row>

            {/* Hi·ªÉn th·ªã tr∆∞·ªùng ƒëi·ªÅu ki·ªán d·ª±a tr√™n danh m·ª•c */}
            {selectedCategoryCreate && (
                <Row gutter={16}>
                    {selectedCategoryCreate === 'milestone' && (
                        <Col span={12}>
                            <Form.Item
                                name="milestoneDays"
                                label="S·ªë ng√†y m·ªëc *"
                                rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë ng√†y m·ªëc' }]}
                            >
                                <InputNumber
                                    min={1}
                                    placeholder="V√≠ d·ª•: 7, 30, 90..."
                                    style={{ width: '100%' }}
                                    addonAfter="ng√†y"
                                />
                            </Form.Item>
                        </Col>
                    )}
                    {selectedCategoryCreate === 'savings' && (
                        <Col span={12}>
                            <Form.Item
                                name="savedMoney"
                                label="S·ªë ti·ªÅn ti·∫øt ki·ªám *"
                                rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn c·ªôt m·ªëc' }]}
                            >
                                <InputNumber
                                    min={1000}
                                    placeholder="V√≠ d·ª•: 100000, 500000, 1000000..."
                                    style={{ width: '100%' }}
                                    addonAfter="VND"
                                    formatter={value => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                                    parser={value => value.replace(/VND\s?|(,*)/g, '')}
                                />
                            </Form.Item>
                        </Col>
                    )}
                </Row>
            )}
        </Form>
    );

    const renderEditForm = () => (
        <Form
            form={editForm}
            layout="vertical"
            onFinish={handleEditAchievement}
            className="space-y-4"
        >
            <Row gutter={16}>
                <Col span={8}>
                    <Form.Item
                        name="name"
                        label="T√™n th√†nh t√≠ch *"
                        rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p t√™n th√†nh t√≠ch' }]}
                    >
                        <Input placeholder="Nh·∫≠p t√™n th√†nh t√≠ch" />
                    </Form.Item>
                </Col>
                <Col span={16}>
                    <Form.Item
                        name="description"
                        label="M√¥ t·∫£ *"
                        rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p m√¥ t·∫£ th√†nh t√≠ch' }]}
                    >
                        <Input placeholder="Nh·∫≠p m√¥ t·∫£ th√†nh t√≠ch" />
                    </Form.Item>
                </Col>
            </Row>

            <Row gutter={16}>
                <Col span={8}>
                    <Form.Item
                        name="category"
                        label="Danh m·ª•c *"
                        rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn danh m·ª•c' }]}
                    >
                        <Select
                            placeholder="Ch·ªçn danh m·ª•c"
                            onChange={setSelectedCategoryEdit}
                            options={[
                                { value: 'milestone', label: 'C·ªôt m·ªëc th·ªùi gian' },
                                { value: 'savings', label: 'Ti·∫øt ki·ªám ti·ªÅn' },
                                { value: 'progress', label: 'Ti·∫øn b·ªô' },
                                { value: 'social', label: 'X√£ h·ªôi' },
                                { value: 'health', label: 'S·ª©c kh·ªèe' }
                            ]}
                        />
                    </Form.Item>
                </Col>
                <Col span={8}>
                    <Form.Item
                        name="requiredPlan"
                        label="G√≥i y√™u c·∫ßu"
                    >
                        <Select placeholder="Ch·ªçn g√≥i (t√πy ch·ªçn)" allowClear>
                            <Option value="basic">Basic</Option>
                            <Option value="premium">Premium</Option>
                            <Option value="vip">VIP</Option>
                        </Select>
                    </Form.Item>
                </Col>
            </Row>

            {/* Hi·ªÉn th·ªã tr∆∞·ªùng ƒëi·ªÅu ki·ªán d·ª±a tr√™n danh m·ª•c */}
            {selectedCategoryEdit && (
                <Row gutter={16}>
                    {selectedCategoryEdit === 'milestone' && (
                        <Col span={8}>
                            <Form.Item
                                name="milestoneDays"
                                label="S·ªë ng√†y m·ªëc *"
                                rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë ng√†y m·ªëc' }]}
                            >
                                <InputNumber
                                    min={1}
                                    placeholder="V√≠ d·ª•: 7, 30, 90..."
                                    style={{ width: '100%' }}
                                    addonAfter="ng√†y"
                                />
                            </Form.Item>
                        </Col>
                    )}

                    {selectedCategoryEdit === 'savings' && (
                        <Col span={8}>
                            <Form.Item
                                name="savedMoney"
                                label="S·ªë ti·ªÅn ti·∫øt ki·ªám *"
                                rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn c·ªôt m·ªëc' }]}
                            >
                                <InputNumber
                                    min={1000}
                                    placeholder="V√≠ d·ª•: 100000, 500000, 1000000..."
                                    style={{ width: '100%' }}
                                    addonAfter="VND"
                                    formatter={value => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                                    parser={value => value.replace(/VND\s?|(,*)/g, '')}
                                />
                            </Form.Item>
                        </Col>
                    )}
                    <Col span={8}>
                        <Form.Item
                            name="isActive"
                            label="Tr·∫°ng th√°i"
                            valuePropName="checked"
                        >
                            <Switch checkedChildren="Ho·∫°t ƒë·ªông" unCheckedChildren="T·∫Øt" />
                        </Form.Item>
                    </Col>
                </Row>
            )}
        </Form>
    );

    return (
        <div className="achievement-management">
            {/* Error Display */}
            {error && (
                <Alert
                    message="L·ªói"
                    description={error}
                    type="error"
                    showIcon
                    closable
                    onClose={() => setError(null)}
                    style={{ marginBottom: '24px' }}
                />
            )}

            {/* Header */}
            <div className="achievement-header achievement-animate-slide-up">
                <h2>
                    <TrophyOutlined />
                    Qu·∫£n l√Ω Th√†nh t√≠ch Huy hi·ªáu
                </h2>
                <p>
                    Qu·∫£n l√Ω th√†nh t√≠ch, huy hi·ªáu v√† reset d·ªØ li·ªáu ng∆∞·ªùi d√πng
                </p>
            </div>

            {/* Statistics Cards */}
            <div className="achievement-stats-grid achievement-animate-fade-in">
                <div className="achievement-stat-card primary">
                    <div className="achievement-stat-icon primary">
                        <TrophyOutlined />
                    </div>
                    <div className="achievement-stat-value">{stats.totalAchievements}</div>
                    <div className="achievement-stat-title">T·ªïng th√†nh t√≠ch</div>
                </div>

                <div className="achievement-stat-card success">
                    <div className="achievement-stat-icon success">
                        <CheckCircleOutlined />
                    </div>
                    <div className="achievement-stat-value">{stats.activeAchievements}</div>
                    <div className="achievement-stat-title">Th√†nh t√≠ch ho·∫°t ƒë·ªông</div>
                </div>

                <div className="achievement-stat-card warning">
                    <div className="achievement-stat-icon warning">
                        <UserOutlined />
                    </div>
                    <div className="achievement-stat-value">{stats.totalUsersWithAchievements}</div>
                    <div className="achievement-stat-title">Ng∆∞·ªùi d√πng c√≥ th√†nh t√≠ch</div>
                </div>

                <div className="achievement-stat-card info">
                    <div className="achievement-stat-icon info">
                        <StarOutlined />
                    </div>
                    <div className="achievement-stat-title">Danh m·ª•c ph·ªï bi·∫øn nh·∫•t</div>
                    <div className="achievement-requirements">
                        {stats.categoryStats?.map(cat => (
                            <div key={cat.category} className="achievement-requirement-tag">
                                {cat.category}: {cat.count}
                            </div>
                        )) || 'Kh√¥ng c√≥ d·ªØ li·ªáu'}
                    </div>
                </div>
            </div>

            {/* Controls */}
            <Card className="achievement-controls achievement-animate-scale-in">
                <Row gutter={[16, 16]} align="middle">
                    <Col xs={24} sm={12} lg={6}>
                        <Input
                            placeholder="T√¨m ki·∫øm th√†nh t√≠ch..."
                            prefix={<SearchOutlined />}
                            value={searchText}
                            onChange={(e) => setSearchText(e.target.value)}
                            allowClear
                            className="achievement-search-input"
                        />
                    </Col>
                    <Col xs={24} sm={12} lg={4}>
                        <Select
                            placeholder="Danh m·ª•c"
                            value={filterCategory}
                            onChange={setFilterCategory}
                            allowClear
                            style={{ width: '100%' }}
                            className="achievement-filter-select"
                        >
                            <Option value="milestone">C·ªôt m·ªëc th·ªùi gian</Option>
                            <Option value="savings">Ti·∫øt ki·ªám ti·ªÅn</Option>
                        </Select>
                    </Col>
                    <Col xs={24} sm={12} lg={4}>
                        <Select
                            placeholder="ƒê·ªô kh√≥"
                            value={filterDifficulty}
                            onChange={setFilterDifficulty}
                            allowClear
                            style={{ width: '100%' }}
                            className="achievement-filter-select"
                        >
                            {difficulties.map(diff => (
                                <Option key={diff} value={diff.toString()}>
                                    {getDifficultyText(diff)}
                                </Option>
                            ))}
                        </Select>
                    </Col>
                    <Col xs={24} sm={12} lg={10}>
                        <Space wrap>
                            <Button
                                type="primary"
                                icon={<PlusOutlined />}
                                onClick={() => setCreateModalVisible(true)}
                                className="achievement-btn achievement-btn-primary"
                            >
                                T·∫°o th√†nh t√≠ch m·ªõi
                            </Button>
                            <Button
                                icon={<ReloadOutlined />}
                                onClick={loadAchievements}
                                loading={loading}
                                className="achievement-btn achievement-btn-secondary"
                            >
                                L√†m m·ªõi
                            </Button>
                            <Button
                                icon={<ReloadOutlined />}
                                onClick={() => setResetModalVisible(true)}
                                className="achievement-btn achievement-btn-danger"
                            >
                                Reset huy hi·ªáu
                            </Button>
                        </Space>
                    </Col>
                </Row>
            </Card>

            {/* Achievement Table */}
            <Card className="achievement-table">
                <Table
                    columns={columns}
                    dataSource={filteredAchievements}
                    rowKey="AchievementID"
                    loading={loading}
                    pagination={{
                        total: filteredAchievements.length,
                        pageSize: 10,
                        showSizeChanger: true,
                        showQuickJumper: true,
                        showTotal: (total, range) =>
                            `${range[0]}-${range[1]} c·ªßa ${total} th√†nh t√≠ch`,
                    }}
                />
            </Card>

            {/* Create Modal */}
            <Modal
                title="T·∫°o th√†nh t√≠ch m·ªõi"
                open={createModalVisible}
                onCancel={() => {
                    setCreateModalVisible(false);
                    setSelectedCategoryCreate('');
                    createForm.resetFields();
                }}
                footer={[
                    <Button key="cancel" onClick={() => {
                        setCreateModalVisible(false);
                        setSelectedCategoryCreate('');
                        createForm.resetFields();
                    }}>
                        H·ªßy
                    </Button>,
                    <Button key="create" type="primary" onClick={() => createForm.submit()}>
                        T·∫°o th√†nh t√≠ch
                    </Button>
                ]}
                width={800}
            >
                {renderCreateForm()}
            </Modal>

            {/* Edit Modal */}
            <Modal
                title="Ch·ªânh s·ª≠a th√†nh t√≠ch"
                open={editModalVisible}
                onCancel={() => {
                    setEditModalVisible(false);
                    setSelectedCategoryEdit('');
                    editForm.resetFields();
                }}
                footer={[
                    <Button key="cancel" onClick={() => {
                        setEditModalVisible(false);
                        setSelectedCategoryEdit('');
                        editForm.resetFields();
                    }}>
                        H·ªßy
                    </Button>,
                    <Button key="save" type="primary" onClick={() => editForm.submit()}>
                        L∆∞u thay ƒë·ªïi
                    </Button>
                ]}
                width={800}
            >
                {renderEditForm()}
            </Modal>

            {/* Detail Modal */}
            <Modal
                title="Chi ti·∫øt th√†nh t√≠ch"
                open={detailModalVisible}
                onCancel={() => setDetailModalVisible(false)}
                footer={[
                    <Button key="close" onClick={() => setDetailModalVisible(false)}>
                        ƒê√≥ng
                    </Button>
                ]}
                width={600}
            >
                {selectedAchievement && (
                    <div>
                        <Row gutter={[16, 16]} align="middle">
                            <Col span={6}>
                                <Avatar
                                    src={selectedAchievement.IconURL}
                                    icon={<TrophyOutlined />}
                                    size={80}
                                />
                            </Col>
                            <Col span={18}>
                                <Title level={3}>{selectedAchievement.Name}</Title>
                                <Paragraph>{selectedAchievement.Description}</Paragraph>
                                <Space wrap>
                                    <Tag icon={getCategoryIcon(selectedAchievement.Category)} color="blue">
                                        {getCategoryText(selectedAchievement.Category)}
                                    </Tag>
                                    <Tag color={getDifficultyColor(selectedAchievement.Difficulty)}>
                                        {getDifficultyText(selectedAchievement.Difficulty)}
                                    </Tag>
                                    <Tag color="gold">
                                        {selectedAchievement.Points} ƒëi·ªÉm
                                    </Tag>
                                </Space>
                            </Col>
                        </Row>

                        <Divider />

                        <Row gutter={[16, 16]}>
                            <Col span={12}>
                                <Text strong>ƒêi·ªÅu ki·ªán:</Text>
                                <div style={{ marginTop: '8px' }}>
                                    {selectedAchievement.MilestoneDays && (
                                        <div>üìÖ {selectedAchievement.MilestoneDays} ng√†y kh√¥ng h√∫t thu·ªëc</div>
                                    )}
                                    {selectedAchievement.SavedMoney && (
                                        <div>üí∞ Ti·∫øt ki·ªám {selectedAchievement.SavedMoney.toLocaleString()} VND</div>
                                    )}
                                    {selectedAchievement.RequiredPlan && (
                                        <div>üéØ G√≥i: {selectedAchievement.RequiredPlan}</div>
                                    )}
                                    {!selectedAchievement.MilestoneDays && !selectedAchievement.SavedMoney && (
                                        <div>‚≠ê Th√†nh t√≠ch ƒë·∫∑c bi·ªát</div>
                                    )}
                                </div>
                            </Col>
                            <Col span={12}>
                                <Text strong>Tr·∫°ng th√°i:</Text>
                                <div style={{ marginTop: '8px' }}>
                                    <Badge
                                        status={selectedAchievement.IsActive ? 'success' : 'error'}
                                        text={selectedAchievement.IsActive ? 'Ho·∫°t ƒë·ªông' : 'Kh√¥ng ho·∫°t ƒë·ªông'}
                                    />
                                </div>
                            </Col>
                        </Row>
                    </div>
                )}
            </Modal>

            {/* Reset Modal */}
            <Modal
                title="Reset Huy hi·ªáu & Th√†nh t√≠ch"
                open={resetModalVisible}
                onCancel={() => {
                    setResetModalVisible(false);
                    setSelectedUser(null);
                }}
                footer={null}
                width={600}
            >
                <div>
                    <Paragraph>
                        Ch·ªçn ph∆∞∆°ng th·ª©c reset huy hi·ªáu v√† th√†nh t√≠ch:
                    </Paragraph>

                    <Card style={{ marginBottom: '16px' }}>
                        <Title level={4}>Reset m·ªôt ng∆∞·ªùi d√πng c·ª• th·ªÉ</Title>
                        <Select
                            style={{ width: '100%', marginBottom: '16px' }}
                            placeholder="Ch·ªçn ng∆∞·ªùi d√πng"
                            value={selectedUser}
                            onChange={setSelectedUser}
                            showSearch
                            optionFilterProp="children"
                        >
                            {users.map(user => (
                                <Option key={user.UserID} value={user.UserID}>
                                    {user.FirstName} {user.LastName} ({user.Email})
                                </Option>
                            ))}
                        </Select>
                        <Button
                            type="primary"
                            danger
                            disabled={!selectedUser}
                            onClick={handleResetUserAchievements}
                            block
                        >
                            Reset huy hi·ªáu ng∆∞·ªùi d√πng n√†y
                        </Button>
                    </Card>

                    <Card>
                        <Title level={4}>Reset t·∫•t c·∫£ ng∆∞·ªùi d√πng</Title>
                        <Paragraph type="danger">
                            ‚ö†Ô∏è Thao t√°c n√†y s·∫Ω x√≥a T·∫§T C·∫¢ huy hi·ªáu c·ªßa T·∫§T C·∫¢ ng∆∞·ªùi d√πng.
                            H·ªá th·ªëng s·∫Ω ch·ªâ gi·ªØ l·∫°i nh·ªØng huy hi·ªáu m√† ng∆∞·ªùi d√πng th·ª±c s·ª± ƒë·ªß ƒëi·ªÅu ki·ªán.
                        </Paragraph>
                        <Popconfirm
                            title="B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën reset t·∫•t c·∫£?"
                            description="Thao t√°c n√†y kh√¥ng th·ªÉ ho√†n t√°c!"
                            onConfirm={handleResetAllAchievements}
                            okText="C√≥, reset t·∫•t c·∫£"
                            cancelText="H·ªßy"
                            okType="danger"
                        >
                            <Button type="primary" danger block>
                                Reset T·∫§T C·∫¢ huy hi·ªáu
                            </Button>
                        </Popconfirm>
                    </Card>
                </div>
            </Modal>
        </div>
    );
};

export default AchievementManagement; 