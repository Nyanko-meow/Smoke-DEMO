import React, { useState, useEffect } from 'react';
import {
    Card,
    Typography,
    Spin,
    Alert,
    Row,
    Col,
    Statistic,
    Progress,
    Tag,
    Divider,
    Empty,
    Button,
    Space,
    Timeline,
    Table
} from 'antd';
import {
    TrophyOutlined,
    DollarCircleOutlined,
    CalendarOutlined,
    HeartOutlined,
    SmileOutlined,
    MehOutlined,
    FrownOutlined,
    ExclamationCircleOutlined,
    ReloadOutlined
} from '@ant-design/icons';
import axios from 'axios';
import moment from 'moment';
import AccessGuard from '../common/AccessGuard';

const { Title, Text, Paragraph } = Typography;

const SmokingAddictionResults = () => {
    const [surveyData, setSurveyData] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        fetchSurveyResults();
    }, []);

    const fetchSurveyResults = async () => {
        setLoading(true);
        setError(null);
        try {
            const token = localStorage.getItem('token');
            if (!token) {
                setError('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem k·∫øt qu·∫£ kh·∫£o s√°t');
                return;
            }

            const response = await axios.get('/api/smoking-addiction-survey/my-results', {
                headers: { Authorization: `Bearer ${token}` }
            });

            // Extract data v√† convert field names ƒë·ªÉ match component expectations
            const data = response.data.success ? response.data.data : response.data;
            
            // Convert field names from PascalCase to camelCase for component compatibility
            const normalizedData = {
                ...data,
                packYear: data.PackYear || data.packYear || 0,
                monthlySavings: data.MonthlySavings || data.monthlySavings || 0,
                successProbability: data.SuccessProbability || data.successProbability || 50,
                addictionLevel: data.AddictionLevel || data.addictionLevel || 'Ch∆∞a x√°c ƒë·ªãnh',
                dailySavings: data.DailySavings || data.dailySavings || 0,
                submittedAt: data.SubmittedAt || data.submittedAt || new Date().toISOString()
            };
            
            setSurveyData(normalizedData);

            setSurveyData(response.data);
        } catch (error) {
            console.error('Error fetching survey results:', error);
            if (error.response?.status === 404) {
                setError('B·∫°n ch∆∞a th·ª±c hi·ªán kh·∫£o s√°t m·ª©c ƒë·ªô nghi·ªán thu·ªëc l√°');
            } else if (error.response?.status === 401) {
                setError('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
            } else {
                setError('Kh√¥ng th·ªÉ t·∫£i k·∫øt qu·∫£ kh·∫£o s√°t. Vui l√≤ng th·ª≠ l·∫°i sau.');
            }
        } finally {
            setLoading(false);
        }
    };

    const getAddictionLevelColor = (level) => {
        switch (level) {
            case 'Nh·∫π': return 'green';
            case 'Trung b√¨nh': return 'orange';
            case 'N·∫∑ng': return 'red';
            case 'R·∫•t n·∫∑ng': return 'darkred';
            default: return 'default';
        }
    };

    const getMotivationIcon = (motivation) => {
        switch (motivation) {
            case 'very_high': return <SmileOutlined style={{ color: '#52c41a' }} />;
            case 'high': return <SmileOutlined style={{ color: '#1890ff' }} />;
            case 'medium': return <MehOutlined style={{ color: '#fa8c16' }} />;
            case 'low': return <FrownOutlined style={{ color: '#faad14' }} />;
            case 'very_low': return <ExclamationCircleOutlined style={{ color: '#ff4d4f' }} />;
            default: return <MehOutlined />;
        }
    };

    const getMotivationText = (motivation) => {
        const motivationMap = {
            'very_high': 'R·∫•t cao',
            'high': 'Cao',
            'medium': 'Trung b√¨nh',
            'low': 'Th·∫•p',
            'very_low': 'R·∫•t th·∫•p'
        };
        return motivationMap[motivation] || 'Ch∆∞a x√°c ƒë·ªãnh';
    };

    const getHealthRiskLevel = (packYear) => {
        if (packYear < 5) return { level: 'Th·∫•p', color: 'green' };
        if (packYear < 10) return { level: 'Trung b√¨nh', color: 'orange' };
        if (packYear < 20) return { level: 'Cao', color: 'red' };
        return { level: 'R·∫•t cao', color: 'darkred' };
    };

    // T√≠nh timeline d·ª± ki·∫øn n·∫øu b·ªè thu·ªëc th√†nh c√¥ng
    const getQuitTimeline = () => {
        return [
            {
                title: '20 ph√∫t ƒë·∫ßu',
                description: 'Nh·ªãp tim v√† huy·∫øt √°p gi·∫£m xu·ªëng b√¨nh th∆∞·ªùng',
                color: 'green'
            },
            {
                title: '12 gi·ªù',
                description: 'L∆∞·ª£ng carbon monoxide trong m√°u gi·∫£m xu·ªëng m·ª©c b√¨nh th∆∞·ªùng',
                color: 'green'
            },
            {
                title: '2-12 tu·∫ßn',
                description: 'L∆∞u th√¥ng m√°u c·∫£i thi·ªán v√† ch·ª©c nƒÉng ph·ªïi tƒÉng l√™n',
                color: 'blue'
            },
            {
                title: '1-9 th√°ng',
                description: 'Ho v√† kh√≥ th·ªü gi·∫£m ƒë√°ng k·ªÉ',
                color: 'blue'
            },
            {
                title: '1 nƒÉm',
                description: 'Nguy c∆° b·ªánh tim gi·∫£m c√≤n m·ªôt n·ª≠a so v·ªõi ng∆∞·ªùi h√∫t thu·ªëc',
                color: 'orange'
            },
            {
                title: '5 nƒÉm',
                description: 'Nguy c∆° ƒë·ªôt qu·ªµ gi·∫£m xu·ªëng m·ª©c c·ªßa ng∆∞·ªùi kh√¥ng h√∫t thu·ªëc',
                color: 'orange'
            },
            {
                title: '10 nƒÉm',
                description: 'Nguy c∆° ung th∆∞ ph·ªïi gi·∫£m c√≤n m·ªôt n·ª≠a so v·ªõi ng∆∞·ªùi h√∫t thu·ªëc',
                color: 'red'
            },
            {
                title: '15 nƒÉm',
                description: 'Nguy c∆° b·ªánh tim b·∫±ng v·ªõi ng∆∞·ªùi kh√¥ng bao gi·ªù h√∫t thu·ªëc',
                color: 'purple'
            }
        ];
    };

    const getSavingsProjection = (surveyData) => {
        if (!surveyData) return [];

        const data = [];
        const periods = [
            { label: '1 tu·∫ßn', multiplier: 7, key: 'week' },
            { label: '1 th√°ng', multiplier: 30, key: 'month' },
            { label: '3 th√°ng', multiplier: 90, key: 'quarter' },
            { label: '6 th√°ng', multiplier: 180, key: 'halfYear' },
            { label: '1 nƒÉm', multiplier: 365, key: 'year' },
            { label: '5 nƒÉm', multiplier: 365 * 5, key: 'fiveYears' }
        ];

        periods.forEach(period => {
            const savings = surveyData.dailySavings * period.multiplier;
            data.push({
                period: period.label,
                savings: savings,
                formattedSavings: savings.toLocaleString() + 'ƒë'
            });
        });

        return data;
    };

    if (loading) {
        return (
            <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '400px' }}>
                <Spin size="large" />
            </div>
        );
    }

    if (error) {
        return (
            <div style={{ padding: '24px', maxWidth: '800px', margin: '0 auto' }}>
                <Alert
                    message="L·ªói"
                    description={error}
                    type="error"
                    showIcon
                    action={
                        <Button size="small" icon={<ReloadOutlined />} onClick={fetchSurveyResults}>
                            Th·ª≠ l·∫°i
                        </Button>
                    }
                />
            </div>
        );
    }

    if (!surveyData) {
        return (
            <div style={{ padding: '24px', maxWidth: '800px', margin: '0 auto' }}>
                <Empty
                    description="B·∫°n ch∆∞a th·ª±c hi·ªán kh·∫£o s√°t m·ª©c ƒë·ªô nghi·ªán thu·ªëc l√°"
                    image={Empty.PRESENTED_IMAGE_SIMPLE}
                />
            </div>
        );
    }

    const healthRisk = getHealthRiskLevel(surveyData.packYear);
    const savingsProjection = getSavingsProjection(surveyData);
    const quitTimeline = getQuitTimeline();

    const savingsColumns = [
        {
            title: 'Th·ªùi gian',
            dataIndex: 'period',
            key: 'period',
        },
        {
            title: 'S·ªë ti·ªÅn ti·∫øt ki·ªám',
            dataIndex: 'formattedSavings',
            key: 'savings',
            align: 'right'
        }
    ];

    return (
        <AccessGuard requiredMembership="Basic">
            <div style={{ padding: '24px', maxWidth: '1200px', margin: '0 auto' }}>
                <div style={{ textAlign: 'center', marginBottom: '32px' }}>
                    <Title level={2}>üìä K·∫øt Qu·∫£ Kh·∫£o S√°t M·ª©c ƒê·ªô Nghi·ªán Thu·ªëc L√°</Title>
                    <Text type="secondary">
                        C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: {moment(surveyData.submittedAt).format('DD/MM/YYYY HH:mm')}
                    </Text>
                </div>

                {/* Th·ªëng k√™ t·ªïng quan */}
                <Row gutter={[16, 16]} style={{ marginBottom: '32px' }}>
                    <Col xs={24} sm={12} lg={6}>
                        <Card>
                            <Statistic
                                title="Pack-Year"
                                value={surveyData.packYear}
                                precision={2}
                                valueStyle={{ color: '#1890ff' }}
                                prefix="üìè"
                            />
                            <Text type="secondary">Ch·ªâ s·ªë y h·ªçc</Text>
                        </Card>
                    </Col>
                    <Col xs={24} sm={12} lg={6}>
                        <Card>
                            <Statistic
                                title="M·ª©c ƒë·ªô nghi·ªán"
                                value={surveyData.addictionLevel}
                                valueStyle={{ color: getAddictionLevelColor(surveyData.addictionLevel) }}
                                prefix="üéØ"
                            />
                        </Card>
                    </Col>
                    <Col xs={24} sm={12} lg={6}>
                        <Card>
                            <Statistic
                                title="X√°c su·∫•t th√†nh c√¥ng"
                                value={surveyData.successProbability}
                                suffix="%"
                                valueStyle={{ color: '#52c41a' }}
                                prefix="üìà"
                            />
                        </Card>
                    </Col>
                    <Col xs={24} sm={12} lg={6}>
                        <Card>
                            <Statistic
                                title="Ti·∫øt ki·ªám/th√°ng"
                                value={surveyData.monthlySavings}
                                formatter={(value) => `${value?.toLocaleString()}ƒë`}
                                valueStyle={{ color: '#fa8c16' }}
                                prefix="üí∞"
                            />
                        </Card>
                    </Col>
                </Row>

                <Row gutter={[16, 16]}>
                    {/* Th√¥ng tin chi ti·∫øt */}
                    <Col xs={24} lg={8}>
                        <Card title="üìã Th√¥ng Tin C√° Nh√¢n" style={{ height: '100%' }}>
                            <Space direction="vertical" style={{ width: '100%' }}>
                                <div>
                                    <Text strong>Tu·ªïi:</Text> {surveyData.age} tu·ªïi
                                </div>
                                <div>
                                    <Text strong>S·ªë ƒëi·∫øu/ng√†y:</Text> {surveyData.cigarettesPerDay} ƒëi·∫øu
                                </div>
                                <div>
                                    <Text strong>S·ªë nƒÉm h√∫t thu·ªëc:</Text> {surveyData.yearsSmoked} nƒÉm
                                </div>
                                <div>
                                    <Text strong>Lo·∫°i thu·ªëc:</Text> {surveyData.packageName}
                                </div>
                                <div>
                                    <Text strong>M·ª©c ƒë·ªô quy·∫øt t√¢m:</Text>{' '}
                                    <Space>
                                        {getMotivationIcon(surveyData.motivation)}
                                        {getMotivationText(surveyData.motivation)}
                                    </Space>
                                </div>
                            </Space>
                        </Card>
                    </Col>

                    {/* ƒê√°nh gi√° r·ªßi ro s·ª©c kh·ªèe */}
                    <Col xs={24} lg={8}>
                        <Card title="‚öïÔ∏è ƒê√°nh Gi√° R·ªßi Ro S·ª©c Kh·ªèe" style={{ height: '100%' }}>
                            <div style={{ textAlign: 'center', marginBottom: '16px' }}>
                                <Progress
                                    type="circle"
                                    percent={Math.min((surveyData.packYear / 30) * 100, 100)}
                                    format={() => `${surveyData.packYear}`}
                                    strokeColor={healthRisk.color}
                                />
                                <div style={{ marginTop: '8px' }}>
                                    <Tag color={healthRisk.color}>{healthRisk.level}</Tag>
                                </div>
                            </div>
                            <Alert
                                message="Gi·∫£i th√≠ch Pack-Year"
                                description={`V·ªõi ${surveyData.packYear} pack-year, m·ª©c r·ªßi ro s·ª©c kh·ªèe c·ªßa b·∫°n ƒë∆∞·ª£c ƒë√°nh gi√° ·ªü m·ª©c ${healthRisk.level.toLowerCase()}. Pack-year l√† ch·ªâ s·ªë quan tr·ªçng ƒë·ªÉ ƒë√°nh gi√° nguy c∆° ung th∆∞ ph·ªïi v√† c√°c b·ªánh li√™n quan ƒë·∫øn h√∫t thu·ªëc.`}
                                type="warning"
                                showIcon
                                style={{ fontSize: '12px' }}
                            />
                        </Card>
                    </Col>

                    {/* X√°c su·∫•t th√†nh c√¥ng */}
                    <Col xs={24} lg={8}>
                        <Card title="üéØ D·ª± B√°o Th√†nh C√¥ng" style={{ height: '100%' }}>
                            <div style={{ textAlign: 'center' }}>
                                <Progress
                                    type="circle"
                                    percent={surveyData.successProbability}
                                    strokeColor={{
                                        '0%': '#ff4d4f',
                                        '50%': '#faad14',
                                        '100%': '#52c41a'
                                    }}
                                />
                            </div>
                            <Divider />
                            <Text type="secondary" style={{ fontSize: '12px' }}>
                                X√°c su·∫•t n√†y ƒë∆∞·ª£c t√≠nh d·ª±a tr√™n tu·ªïi, m·ª©c ƒë·ªô nghi·ªán, th·ªùi gian h√∫t thu·ªëc v√† m·ª©c ƒë·ªô quy·∫øt t√¢m c·ªßa b·∫°n.
                            </Text>
                        </Card>
                    </Col>

                    {/* B·∫£ng ti·∫øt ki·ªám ti·ªÅn */}
                    <Col xs={24} lg={12}>
                        <Card title="üíµ D·ª± B√°o Ti·∫øt Ki·ªám Ti·ªÅn">
                            <Table
                                columns={savingsColumns}
                                dataSource={savingsProjection}
                                pagination={false}
                                size="small"
                                rowKey="period"
                            />
                        </Card>
                    </Col>

                    {/* Timeline l·ª£i √≠ch s·ª©c kh·ªèe */}
                    <Col xs={24} lg={12}>
                        <Card title="üè• L·ª£i √çch S·ª©c Kh·ªèe Khi B·ªè Thu·ªëc">
                            <Timeline size="small">
                                {quitTimeline.map((item, index) => (
                                    <Timeline.Item key={index} color={item.color}>
                                        <Text strong>{item.title}</Text>
                                        <br />
                                        <Text type="secondary" style={{ fontSize: '12px' }}>
                                            {item.description}
                                        </Text>
                                    </Timeline.Item>
                                ))}
                            </Timeline>
                        </Card>
                    </Col>
                </Row>

                {/* L·ªùi khuy√™n */}
                <Card style={{ marginTop: '24px' }}>
                    <Title level={4}>üí° L·ªùi Khuy√™n D√†nh Cho B·∫°n</Title>
                    <Row gutter={[16, 16]}>
                        <Col xs={24} md={8}>
                            <Alert
                                message="Chi·∫øn thu·∫≠t t√¢m l√Ω"
                                description="H√£y t·∫≠p trung v√†o s·ªë ti·ªÅn ti·∫øt ki·ªám ƒë∆∞·ª£c v√† l·ª£i √≠ch s·ª©c kh·ªèe thay v√¨ nghƒ© ƒë·∫øn vi·ªác 't·ª´ b·ªè' thu·ªëc l√°."
                                type="info"
                                showIcon
                            />
                        </Col>
                        <Col xs={24} md={8}>
                            <Alert
                                message="Thay th·∫ø th√≥i quen"
                                description="T√¨m ho·∫°t ƒë·ªông thay th·∫ø cho nh·ªØng l√∫c th∆∞·ªùng h√∫t thu·ªëc: u·ªëng n∆∞·ªõc, nhai k·∫πo cao su, t·∫≠p th·ªÉ d·ª•c nh·∫π."
                                type="success"
                                showIcon
                            />
                        </Col>
                        <Col xs={24} md={8}>
                            <Alert
                                message="H·ªó tr·ª£ x√£ h·ªôi"
                                description="Chia s·∫ª k·∫ø ho·∫°ch b·ªè thu·ªëc v·ªõi gia ƒë√¨nh, b·∫°n b√® v√† t√¨m ki·∫øm s·ª± h·ªó tr·ª£ t·ª´ c·ªông ƒë·ªìng."
                                type="warning"
                                showIcon
                            />
                        </Col>
                    </Row>
                </Card>

                <div style={{ textAlign: 'center', marginTop: '32px' }}>
                    <Button type="primary" icon={<ReloadOutlined />} onClick={fetchSurveyResults}>
                        L√†m m·ªõi d·ªØ li·ªáu
                    </Button>
                </div>
            </div>
        </AccessGuard>
    );
};

export default SmokingAddictionResults;