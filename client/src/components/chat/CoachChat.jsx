import React, { useState, useEffect } from 'react';
import { Row, Col, Typography, Card, Empty, Button, Space, message, Avatar, Badge } from 'antd';
import { MessageOutlined, ArrowLeftOutlined, TeamOutlined, UserOutlined } from '@ant-design/icons';
import axios from 'axios';
import ChatBox from './ChatBox';
import './CoachChat.css';

const { Title, Text } = Typography;

const CoachChat = ({ onBack }) => {
    const [members, setMembers] = useState([]);
    const [loading, setLoading] = useState(false);
    const [currentUser, setCurrentUser] = useState(null);
    const [selectedMember, setSelectedMember] = useState(null);
    const [selectedConversation, setSelectedConversation] = useState(null);
    const [isMobile, setIsMobile] = useState(window.innerWidth < 768);

    useEffect(() => {
        // Handle window resize for responsive behavior
        const handleResize = () => {
            setIsMobile(window.innerWidth < 768);
        };

        window.addEventListener('resize', handleResize);
        return () => window.removeEventListener('resize', handleResize);
    }, []);

    useEffect(() => {
        // Get current user info from localStorage
        const coachData = localStorage.getItem('coachData') || localStorage.getItem('coachUser');
        if (coachData) {
            try {
                const parsedData = JSON.parse(coachData);
                setCurrentUser({
                    userId: parsedData.UserID || parsedData.userId,
                    UserID: parsedData.UserID || parsedData.userId,
                    role: 'coach',
                    firstName: parsedData.FirstName,
                    lastName: parsedData.LastName,
                    name: `${parsedData.FirstName} ${parsedData.LastName}`,
                    email: parsedData.Email
                });
                console.log('üîç CoachChat currentUser set:', {
                    userId: parsedData.UserID || parsedData.userId,
                    role: 'coach',
                    firstName: parsedData.FirstName,
                    lastName: parsedData.LastName
                });
            } catch (error) {
                console.error('Error parsing coach data:', error);
            }
        }

        // Load members
        loadMembers();
    }, []);

    const loadMembers = async () => {
        try {
            setLoading(true);
            const token = localStorage.getItem('token') || localStorage.getItem('coachToken');

            console.log('üîç Loading members for coach chat...');

            const response = await axios.get(
                'http://localhost:4000/api/chat/coach/members',
                {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                }
            );

            console.log('üìã Members response:', response.data);

            if (response.data.success) {
                setMembers(response.data.data);
                console.log('‚úÖ Loaded members:', response.data.data.length);
            } else {
                console.error('‚ùå Failed to load members:', response.data.message);
                message.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch th√†nh vi√™n');
            }
        } catch (error) {
            console.error('‚ùå Error loading members:', error);
            message.error('L·ªói khi t·∫£i danh s√°ch th√†nh vi√™n: ' + (error.response?.data?.message || error.message));
        } finally {
            setLoading(false);
        }
    };

    const startConversation = async (member) => {
        try {
            const token = localStorage.getItem('token') || localStorage.getItem('coachToken');

            console.log('üöÄ Starting conversation with member:', member.UserID);

            // If conversation already exists, just select it
            if (member.HasConversation && member.ConversationID) {
                setSelectedMember(member);
                setSelectedConversation({
                    ConversationID: member.ConversationID,
                    MemberID: member.UserID,
                    MemberName: member.FullName,
                    MemberEmail: member.Email,
                    MemberAvatar: member.Avatar
                });
                return;
            }

            // Create new conversation
            const response = await axios.post(
                'http://localhost:4000/api/chat/coach/start-conversation',
                { memberId: member.UserID },
                {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                }
            );

            if (response.data.success) {
                message.success('Cu·ªôc tr√≤ chuy·ªán ƒë√£ ƒë∆∞·ª£c t·∫°o!');

                // Set selected member and conversation
                setSelectedMember(member);
                setSelectedConversation({
                    ConversationID: response.data.data.conversationId,
                    MemberID: member.UserID,
                    MemberName: member.FullName,
                    MemberEmail: member.Email,
                    MemberAvatar: member.Avatar
                });

                // Reload members to update status
                loadMembers();
            } else {
                message.error('Kh√¥ng th·ªÉ t·∫°o cu·ªôc tr√≤ chuy·ªán');
            }
        } catch (error) {
            console.error('Error starting conversation:', error);
            message.error('L·ªói khi t·∫°o cu·ªôc tr√≤ chuy·ªán');
        }
    };

    const handleBackToList = () => {
        setSelectedMember(null);
        setSelectedConversation(null);
    };

    const handleNewMessage = (newMessage) => {
        // Update unread count for the member
        console.log('üí¨ New message received:', newMessage);
        // Optionally reload members to update unread counts
        loadMembers();
    };

    const renderMemberItem = (member) => (
        <div
            key={member.UserID}
            className={`member-item ${selectedMember?.UserID === member.UserID ? 'selected' : ''
                }`}
            onClick={() => startConversation(member)}
        >
            <div className="flex items-center space-x-3">
                <div className="member-avatar-container">
                    <Avatar
                        size={48}
                        src={member.Avatar}
                        icon={<UserOutlined />}
                        className="border border-gray-200"
                    />
                    {member.UnreadCount > 0 && (
                        <div className="member-unread-badge">
                            {member.UnreadCount}
                        </div>
                    )}
                    <div className="online-indicator"></div>
                </div>
                <div className="member-info">
                    <div className="flex items-center justify-between">
                        <h4 className="member-name">{member.FullName}</h4>
                        <span className="member-last-activity">
                            {member.LastActivity && new Date(member.LastActivity).toLocaleDateString('vi-VN')}
                        </span>
                    </div>
                    <p className="member-email">{member.Email}</p>
                    <div className="member-status-row">
                        <div className="member-status-indicators">
                            {member.HasConversation && (
                                <span className="member-conversation-status">
                                    ‚óè ƒê√£ c√≥ cu·ªôc tr√≤ chuy·ªán
                                </span>
                            )}
                            <span className="member-plan-status">
                                K·∫ø ho·∫°ch: {member.QuitPlanStatus}
                            </span>
                        </div>
                        {member.UnreadCount > 0 && (
                            <span className="member-unread-text">
                                {member.UnreadCount} tin nh·∫Øn m·ªõi
                            </span>
                        )}
                    </div>
                </div>
            </div>
        </div>
    );

    // Mobile view: Show either member list or chat
    if (isMobile) {
        return (
            <div className="coach-chat-container">
                {/* Header */}
                <div className="coach-chat-header">
                    <Space>
                        {(onBack || selectedMember) && (
                            <Button
                                icon={<ArrowLeftOutlined />}
                                onClick={selectedMember ? handleBackToList : onBack}
                                type="text"
                                style={{ color: 'white', border: '1px solid rgba(255,255,255,0.3)' }}
                            />
                        )}
                        <Title level={3} className="mb-0" style={{ color: 'white' }}>
                            <MessageOutlined className="mr-2" />
                            {selectedMember ? selectedMember.FullName : 'Chat v·ªõi th√†nh vi√™n'}
                        </Title>
                    </Space>
                    {!selectedMember && (
                        <Text type="secondary" style={{ color: 'rgba(255,255,255,0.8)' }}>
                            T∆∞ v·∫•n v√† h·ªó tr·ª£ th√†nh vi√™n trong qu√° tr√¨nh cai thu·ªëc
                        </Text>
                    )}
                </div>

                {/* Content */}
                <div className="flex-1 overflow-hidden">
                    {selectedMember && selectedConversation ? (
                        // Show chat interface
                        <ChatBox
                            conversationId={selectedConversation.ConversationID}
                            receiverId={selectedMember.UserID}
                            receiverInfo={{
                                FullName: selectedMember.FullName,
                                MemberName: selectedMember.FullName,
                                Avatar: selectedMember.Avatar,
                                Email: selectedMember.Email
                            }}
                            currentUser={currentUser}
                            onNewMessage={handleNewMessage}
                            isCoachView={true}
                            height="100%"
                            style={{ height: '100%' }}
                        />
                    ) : (
                        // Show member list
                        <div className="members-list-container">
                            <div className="members-list-header">
                                <h3 className="font-semibold text-gray-900 flex items-center">
                                    <TeamOutlined className="mr-2" />
                                    Th√†nh vi√™n ƒë∆∞·ª£c ph√¢n c√¥ng
                                </h3>
                                <p className="text-sm text-gray-500 mt-1">
                                    {members.length} th√†nh vi√™n
                                </p>
                            </div>

                            <div className="flex-1 overflow-y-auto members-list-scroll">
                                {loading ? (
                                    <div className="flex justify-center items-center py-8">
                                        <div className="loading-spinner rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
                                    </div>
                                ) : members.length === 0 ? (
                                    <div className="empty-members-state">
                                        <Empty
                                            description="Ch∆∞a c√≥ th√†nh vi√™n n√†o ƒë∆∞·ª£c ph√¢n c√¥ng"
                                            image={Empty.PRESENTED_IMAGE_SIMPLE}
                                        />
                                    </div>
                                ) : (
                                    <div>
                                        {members.map(member => renderMemberItem(member))}
                                    </div>
                                )}
                            </div>
                        </div>
                    )}
                </div>
            </div>
        );
    }

    // Desktop view: Show both member list and chat side by side
    return (
        <div className="coach-chat-container">
            {/* Header */}
            <div className="coach-chat-header">
                <Space>
                    {onBack && (
                        <Button
                            icon={<ArrowLeftOutlined />}
                            onClick={onBack}
                            type="text"
                            style={{ color: 'white', border: '1px solid rgba(255,255,255,0.3)' }}
                        />
                    )}
                    <Title level={2} className="mb-0" style={{ color: 'white' }}>
                        <MessageOutlined className="mr-3" />
                        Chat v·ªõi th√†nh vi√™n
                    </Title>
                </Space>
                <Text type="secondary" style={{ color: 'rgba(255,255,255,0.8)' }}>
                    T∆∞ v·∫•n v√† h·ªó tr·ª£ th√†nh vi√™n trong qu√° tr√¨nh cai thu·ªëc
                </Text>
            </div>

            {/* Chat Content */}
            <div className="flex-1 flex overflow-hidden">
                <Row className="w-full h-full" gutter={0}>
                    {/* Members List */}
                    <Col xs={24} md={selectedMember ? 8 : 24} lg={selectedMember ? 6 : 24} className="h-full">
                        <div className="members-list-container">
                            <div className="members-list-header">
                                <div className="flex items-center justify-between">
                                    <h3 className="font-semibold text-gray-900 flex items-center">
                                        <TeamOutlined className="mr-2" />
                                        Th√†nh vi√™n ƒë∆∞·ª£c ph√¢n c√¥ng
                                    </h3>
                                    {selectedMember && (
                                        <Button
                                            size="small"
                                            onClick={handleBackToList}
                                            className="md:hidden"
                                        >
                                            Danh s√°ch
                                        </Button>
                                    )}
                                </div>
                                <p className="text-sm text-gray-500 mt-1">
                                    {members.length} th√†nh vi√™n
                                </p>
                            </div>

                            <div className="flex-1 overflow-y-auto members-list-scroll">
                                {loading ? (
                                    <div className="flex justify-center items-center py-8">
                                        <div className="loading-spinner rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
                                    </div>
                                ) : members.length === 0 ? (
                                    <div className="empty-members-state">
                                        <Empty
                                            description="Ch∆∞a c√≥ th√†nh vi√™n n√†o ƒë∆∞·ª£c ph√¢n c√¥ng"
                                            image={Empty.PRESENTED_IMAGE_SIMPLE}
                                        />
                                    </div>
                                ) : (
                                    <div>
                                        {members.map(member => renderMemberItem(member))}
                                    </div>
                                )}
                            </div>
                        </div>
                    </Col>

                    {/* Chat Area */}
                    {selectedMember && selectedConversation && (
                        <Col xs={24} md={16} lg={18} className="h-full">
                            <div className="chat-area-container">
                                <ChatBox
                                    conversationId={selectedConversation.ConversationID}
                                    receiverId={selectedMember.UserID}
                                    receiverInfo={{
                                        FullName: selectedMember.FullName,
                                        MemberName: selectedMember.FullName,
                                        Avatar: selectedMember.Avatar,
                                        Email: selectedMember.Email
                                    }}
                                    currentUser={currentUser}
                                    onNewMessage={handleNewMessage}
                                    isCoachView={true}
                                    height="calc(100vh - 200px)"
                                    style={{ height: '100%' }}
                                />
                            </div>
                        </Col>
                    )}

                    {/* Chat Placeholder */}
                    {!selectedMember && (
                        <Col xs={0} md={16} lg={18} className="h-full hidden md:block">
                            <div className="chat-placeholder">
                                <div className="chat-placeholder-content">
                                    <div className="chat-placeholder-icon">
                                        <MessageOutlined />
                                    </div>
                                    <h3 className="chat-placeholder-title">
                                        Ch·ªçn m·ªôt th√†nh vi√™n ƒë·ªÉ b·∫Øt ƒë·∫ßu chat
                                    </h3>
                                    <p className="chat-placeholder-description">
                                        Danh s√°ch b√™n tr√°i hi·ªÉn th·ªã c√°c th√†nh vi√™n ƒë∆∞·ª£c admin ph√¢n c√¥ng cho b·∫°n.
                                        Click v√†o b·∫•t k·ª≥ th√†nh vi√™n n√†o ƒë·ªÉ b·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán v√† t∆∞ v·∫•n h·ªó tr·ª£ cai thu·ªëc.
                                    </p>
                                </div>
                            </div>
                        </Col>
                    )}
                </Row>
            </div>
        </div>
    );
};

export default CoachChat; 