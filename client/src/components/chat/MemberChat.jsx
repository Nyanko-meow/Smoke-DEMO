import React, { useState, useEffect } from 'react';
import { Card, Alert, Spin, Button, Space, Typography, message } from 'antd';
import { MessageOutlined, UserOutlined, ReloadOutlined } from '@ant-design/icons';
import ChatBox from './ChatBox';
import AccessGuard from '../common/AccessGuard';
import axios from 'axios';

const { Text, Title } = Typography;

const MemberChat = ({ style, height = 400 }) => {
    const [conversationData, setConversationData] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [currentUser, setCurrentUser] = useState(null);

    useEffect(() => {
        // Get current user info from localStorage
        const userData = localStorage.getItem('userData');
        if (userData) {
            try {
                const parsedData = JSON.parse(userData);
                setCurrentUser({
                    userId: parsedData.UserID || parsedData.userId,
                    role: 'member',
                    name: `${parsedData.FirstName} ${parsedData.LastName}`,
                    email: parsedData.Email
                });
            } catch (error) {
                console.error('Error parsing user data:', error);
            }
        }

        loadConversation();
    }, []);

    const loadConversation = async () => {
        try {
            setLoading(true);
            setError(null);
            const token = localStorage.getItem('token');

            if (!token) {
                setError('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng chat');
                setLoading(false);
                return;
            }

            console.log('üîç Loading conversation for member...');

            // Test server connection first
            try {
                const serverResponse = await axios.get('http://localhost:4000/api/test', { timeout: 5000 });
                console.log('‚úÖ Server connection OK:', serverResponse.data);
            } catch (serverError) {
                console.error('‚ùå Server connection failed:', serverError);
                if (serverError.code === 'ECONNREFUSED') {
                    setError('Server kh√¥ng ch·∫°y. Vui l√≤ng start server v·ªõi l·ªánh: npm start (trong th∆∞ m·ª•c server)');
                } else if (serverError.code === 'ECONNABORTED') {
                    setError('Server ph·∫£n h·ªìi qu√° ch·∫≠m. Vui l√≤ng ki·ªÉm tra server c√≥ ƒëang ch·∫°y kh√¥ng');
                } else {
                    setError(`Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server: ${serverError.message}`);
                }
                setLoading(false);
                return;
            }

            // Get debug info
            try {
                const debugResponse = await axios.get(
                    'http://localhost:4000/api/chat/debug-user',
                    {
                        headers: { 'Authorization': `Bearer ${token}` },
                        timeout: 10000
                    }
                );
                console.log('üîç Debug user info:', debugResponse.data);
            } catch (debugError) {
                console.error('Debug API error:', debugError);
            }

            // Load conversation
            const response = await axios.get(
                'http://localhost:4000/api/chat/member/conversation',
                {
                    headers: { 'Authorization': `Bearer ${token}` },
                    timeout: 10000
                }
            );

            console.log('üìû Conversation API response:', response.data);

            if (response.data.success) {
                setConversationData(response.data.data);
                message.success('ƒê√£ t·∫£i cu·ªôc tr√≤ chuy·ªán th√†nh c√¥ng');
            } else {
                setError(response.data.message || 'Kh√¥ng th·ªÉ t·∫£i cu·ªôc tr√≤ chuy·ªán');
            }
        } catch (error) {
            console.error('‚ùå Error loading conversation:', error);

            if (error.code === 'ECONNABORTED') {
                setError('Timeout: Server ph·∫£n h·ªìi qu√° ch·∫≠m. Vui l√≤ng th·ª≠ l·∫°i');
            } else if (error.response?.status === 404) {
                const errorData = error.response.data;
                if (errorData.error_code === 'NO_ASSIGNED_COACH') {
                    setError('B·∫°n ch∆∞a ƒë∆∞·ª£c ph√¢n c√¥ng coach. Vui l√≤ng li√™n h·ªá admin ƒë·ªÉ ƒë∆∞·ª£c ph√¢n c√¥ng coach tr∆∞·ªõc khi c√≥ th·ªÉ chat.');
                } else {
                    setError('B·∫°n ch∆∞a ƒë∆∞·ª£c assign coach ho·∫∑c ch∆∞a c√≥ k·∫ø ho·∫°ch cai thu·ªëc active. Vui l√≤ng li√™n h·ªá admin ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£');
                }
            } else if (error.response?.status === 401) {
                setError('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i');
                localStorage.removeItem('token');
                localStorage.removeItem('userData');
            } else if (error.response?.status === 500) {
                setError('L·ªói server. Vui l√≤ng ki·ªÉm tra database connection v√† th·ª≠ l·∫°i sau');
            } else if (error.code === 'ECONNREFUSED' || error.message.includes('ECONNREFUSED')) {
                setError('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra server c√≥ ƒëang ch·∫°y kh√¥ng (npm start)');
            } else {
                setError(`L·ªói: ${error.response?.data?.message || error.message || 'Kh√¥ng th·ªÉ t·∫£i cu·ªôc tr√≤ chuy·ªán'}`);
            }
        } finally {
            setLoading(false);
        }
    };

    const handleNewMessage = (message) => {
        // Handle new message if needed
    };

    return (
        <AccessGuard feature="chat v·ªõi coach">
            <Card
                title={
                    <Space>
                        <MessageOutlined />
                        <span>Chat v·ªõi Coach</span>
                    </Space>
                }
                style={style}
                actions={[
                    <Button
                        key="reload"
                        icon={<ReloadOutlined />}
                        onClick={loadConversation}
                        loading={loading}
                        type="link"
                    >
                        L√†m m·ªõi
                    </Button>
                ]}
            >
                {loading ? (
                    <div style={{ textAlign: 'center', padding: '50px 0' }}>
                        <Spin size="large" />
                        <div style={{ marginTop: 16 }}>
                            <Text>ƒêang k·∫øt n·ªëi v·ªõi coach...</Text>
                        </div>
                    </div>
                ) : error ? (
                    <Alert
                        message="Kh√¥ng th·ªÉ k·∫øt n·ªëi"
                        description={error}
                        type="error"
                        showIcon
                        action={
                            <Button
                                size="small"
                                type="primary"
                                onClick={loadConversation}
                            >
                                Th·ª≠ l·∫°i
                            </Button>
                        }
                        style={{ marginBottom: 16 }}
                    />
                ) : conversationData ? (
                    <div>
                        {/* Coach Info */}
                        <Alert
                            message={`ƒêang chat v·ªõi: ${conversationData.coach?.FullName || 'Coach'}`}
                            description={`Chuy√™n m√¥n: ${conversationData.coach?.Specialization || 'H·ªó tr·ª£ cai thu·ªëc'}`}
                            type="info"
                            showIcon
                            style={{ marginBottom: 16 }}
                            icon={<UserOutlined />}
                        />

                        {/* Chat Box */}
                        <ChatBox
                            conversationId={conversationData.conversation?.ConversationID}
                            receiverId={conversationData.coach?.UserID}
                            receiverInfo={{
                                FullName: conversationData.coach?.FullName,
                                Avatar: conversationData.coach?.Avatar,
                                Email: conversationData.coach?.Email
                            }}
                            currentUser={currentUser}
                            height={height}
                            style={{ minHeight: height }}
                        />
                    </div>
                ) : (
                    <Alert
                        message="Ch∆∞a c√≥ cu·ªôc tr√≤ chuy·ªán"
                        description="B·∫°n ch∆∞a ƒë∆∞·ª£c ph√¢n c√¥ng coach ho·∫∑c ch∆∞a c√≥ cu·ªôc tr√≤ chuy·ªán n√†o."
                        type="warning"
                        showIcon
                    />
                )}
            </Card>
        </AccessGuard>
    );
};

export default MemberChat; 