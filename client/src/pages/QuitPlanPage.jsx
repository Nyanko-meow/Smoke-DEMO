import React, { useState, useEffect } from 'react';
import {
    Form,
    Input,
    Button,
    Card,
    Typography,
    message,
    Spin,
    DatePicker,
    InputNumber,
    Alert,
    Space,
    Divider,
    Row,
    Col,
    List,
    Tag,
    Tabs,
    Progress,
    Statistic,
    notification,
    Badge,
    Steps,
    Checkbox,
    Tooltip
} from 'antd';
import {
    CalendarOutlined,
    HeartOutlined,
    BulbOutlined,
    CheckCircleOutlined,
    ExclamationCircleOutlined,
    PlusOutlined,
    BookOutlined,
    TrophyOutlined,
    DollarOutlined,
    FireOutlined,
    SmileOutlined,
    SaveOutlined,
    LineChartOutlined,
    FormOutlined,
    CopyOutlined,
    EyeOutlined
} from '@ant-design/icons';
import axios from 'axios';
import dayjs from 'dayjs';
import { useNavigate, useLocation } from 'react-router-dom';
// Remove date-fns as it conflicts with dayjs
import AccessGuard from '../components/common/AccessGuard';


const { Title, Text, Paragraph } = Typography;
const { TextArea } = Input;
const { TabPane } = Tabs;
const { Step } = Steps;

// Create axios instance with defaults
const api = axios.create({
    baseURL: 'http://localhost:4000',
    headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
    },
    withCredentials: false, // Change to false to avoid CORS issues
    timeout: 10000 // 10 second timeout
});

// Add token to requests
api.interceptors.request.use(
    (config) => {
        const token = localStorage.getItem('token');
        if (token) {
            config.headers.Authorization = `Bearer ${token}`;
        }
        console.log('API Request:', config.method?.toUpperCase(), config.url);
        return config;
    },
    (error) => {
        console.error('Request interceptor error:', error);
        return Promise.reject(error);
    }
);

// Add response interceptor for better error handling
api.interceptors.response.use(
    (response) => {
        console.log('API Response:', response.status, response.config.url);
        return response;
    },
    (error) => {
        console.error('API Error:', {
            url: error.config?.url,
            status: error.response?.status,
            message: error.message,
            data: error.response?.data
        });
        return Promise.reject(error);
    }
);

const QuitPlanPage = () => {
    const navigate = useNavigate();
    const location = useLocation();
    const [form] = Form.useForm();
    const [loading, setLoading] = useState(true);
    const [submitting, setSubmitting] = useState(false);
    const [existingPlans, setExistingPlans] = useState([]);
    const [planTemplate, setPlanTemplate] = useState([]);
    const [paymentInfo, setPaymentInfo] = useState(null);
    const [activeTab, setActiveTab] = useState('plan');
    const [justCreatedPlan, setJustCreatedPlan] = useState(false);

    // New states for improved workflow
    const [currentStep, setCurrentStep] = useState(0);
    const [selectedTemplate, setSelectedTemplate] = useState(null);
    
    // Survey completion check states
    const [surveyCompleted, setSurveyCompleted] = useState(false);
    const [surveyLoading, setSurveyLoading] = useState(true);

    // All template options
    const allTemplateOptions = [
        {
            id: 'premium',
            name: 'K·∫ø ho·∫°ch Premium - 8 tu·∫ßn',
            description: 'K·∫ø ho·∫°ch chuy√™n nghi·ªáp ƒë∆∞·ª£c thi·∫øt k·∫ø b·ªüi chuy√™n gia, ph√π h·ª£p v·ªõi h·∫ßu h·∫øt m·ªçi ng∆∞·ªùi',
            icon: 'üèÜ',
            color: '#52c41a',
            duration: '8 tu·∫ßn (56 ng√†y)',
            totalDays: 56,
            planDuration: 60, // Days in Premium plan
            phases: [
                {
                    phaseName: "Tu·∫ßn 1-2: Detox v√† chu·∫©n b·ªã",
                    phaseDescription: "‚Ä¢ Th·ª±c hi·ªán detox c∆° th·ªÉ v·ªõi ch·∫ø ƒë·ªô ƒÉn u·ªëng l√†nh m·∫°nh\n‚Ä¢ B·∫Øt ƒë·∫ßu ch∆∞∆°ng tr√¨nh t·∫≠p luy·ªán th·ªÉ ch·∫•t\n‚Ä¢ Thi·∫øt l·∫≠p h·ªá th·ªëng h·ªó tr·ª£ t·ª´ gia ƒë√¨nh v√† b·∫°n b√®\n‚Ä¢ H·ªçc c√°c k·ªπ thu·∫≠t th∆∞ gi√£n: thi·ªÅn, yoga\n‚Ä¢ Ghi ch√©p chi ti·∫øt v·ªÅ triggers v√† c√°ch ƒë·ªëi ph√≥",
                    durationDays: 14
                },
                {
                    phaseName: "Tu·∫ßn 3-4: X√¢y d·ª±ng th√≥i quen m·ªõi",
                    phaseDescription: "‚Ä¢ Ph√°t tri·ªÉn hobby m·ªõi ƒë·ªÉ thay th·∫ø th·ªùi gian h√∫t thu·ªëc\n‚Ä¢ Tham gia c√°c nh√≥m h·ªó tr·ª£ tr·ª±c tuy·∫øn/offline\n‚Ä¢ √Åp d·ª•ng k·ªπ thu·∫≠t CBT (Cognitive Behavioral Therapy)\n‚Ä¢ Theo d√µi c·∫£i thi·ªán s·ª©c kh·ªèe: huy·∫øt √°p, nh·ªãp tim\n‚Ä¢ L·∫≠p k·∫ø ho·∫°ch t√†i ch√≠nh t·ª´ ti·ªÅn ti·∫øt ki·ªám",
                    durationDays: 14
                },
                {
                    phaseName: "Tu·∫ßn 5-6: ƒê·ªëi ph√≥ v·ªõi kh√≥ khƒÉn",
                    phaseDescription: "‚Ä¢ Nh·∫≠n di·ªán v√† x·ª≠ l√Ω c√°c t√¨nh hu·ªëng nguy hi·ªÉm\n‚Ä¢ Ph√°t tri·ªÉn k·ªπ nƒÉng qu·∫£n l√Ω stress n√¢ng cao\n‚Ä¢ T·∫°o ƒë·ªông l·ª±c d√†i h·∫°n v·ªõi m·ª•c ti√™u c·ª• th·ªÉ\n‚Ä¢ ƒê√°nh gi√° ti·∫øn b·ªô v√† ƒëi·ªÅu ch·ªânh k·∫ø ho·∫°ch\n‚Ä¢ Chu·∫©n b·ªã t√¢m l√Ω cho giai ƒëo·∫°n duy tr√¨",
                    durationDays: 14
                },
                {
                    phaseName: "Tu·∫ßn 7-8: Duy tr√¨ v√† ph√°t tri·ªÉn",
                    phaseDescription: "‚Ä¢ ·ªîn ƒë·ªãnh l·ªëi s·ªëng kh√¥ng thu·ªëc l√°\n‚Ä¢ M·ªü r·ªông m·∫°ng l∆∞·ªõi h·ªó tr·ª£ x√£ h·ªôi\n‚Ä¢ Theo d√µi v√† c·∫£i thi·ªán s·ª©c kh·ªèe tinh th·∫ßn\n‚Ä¢ L·∫≠p k·∫ø ho·∫°ch ph√≤ng ng·ª´a t√°i ph√°t\n‚Ä¢ Chia s·∫ª kinh nghi·ªám ƒë·ªÉ gi√∫p ng∆∞·ªùi kh√°c",
                    durationDays: 14
                }
            ]
        },
        {
            id: 'premium-intensive',
            name: 'K·∫ø ho·∫°ch Premium Chuy√™n s√¢u - 8 tu·∫ßn',
            description: 'K·∫ø ho·∫°ch t√≠ch c·ª±c d√†nh cho nh·ªØng ng∆∞·ªùi c√≥ √Ω ch√≠ m·∫°nh m·∫Ω v√† quy·∫øt t√¢m cao',
            icon: 'üöÄ',
            color: '#ff7a45',
            duration: '8 tu·∫ßn (56 ng√†y)',
            totalDays: 56,
            planDuration: 60, // Days in Premium plan
            phases: [
                {
                    phaseName: "Tu·∫ßn 1-2: C·∫Øt b·ªè ho√†n to√†n v√† detox m·∫°nh",
                    phaseDescription: "‚Ä¢ Ng·ª´ng thu·ªëc l√° ngay l·∫≠p t·ª©c, kh√¥ng gi·∫£m d·∫ßn\n‚Ä¢ Ch·∫ø ƒë·ªô detox nghi√™m ng·∫∑t: n∆∞·ªõc chanh, tr√† xanh, rau xanh\n‚Ä¢ T·∫≠p th·ªÉ d·ª•c c∆∞·ªùng ƒë·ªô cao 2 l·∫ßn/ng√†y\n‚Ä¢ Thi·ªÅn v√† yoga m·ªói s√°ng t·ªëi\n‚Ä¢ Ghi nh·∫≠t k√Ω chi ti·∫øt m·ªçi c·∫£m x√∫c v√† tri·ªáu ch·ª©ng\n‚Ä¢ Lo·∫°i b·ªè ho√†n to√†n caffeine v√† ƒë·ªì ng·ªçt",
                    durationDays: 14
                },
                {
                    phaseName: "Tu·∫ßn 3-4: T√°i c·∫•u tr√∫c l·ªëi s·ªëng ho√†n to√†n",
                    phaseDescription: "‚Ä¢ Thay ƒë·ªïi to√†n b·ªô th√≥i quen h√†ng ng√†y\n‚Ä¢ H·ªçc 2 k·ªπ nƒÉng m·ªõi: nh·∫°c c·ª•, ngo·∫°i ng·ªØ, ngh·ªÅ th·ªß c√¥ng\n‚Ä¢ Tham gia c·ªông ƒë·ªìng th·ªÉ thao/c√¢u l·∫°c b·ªô s·ª©c kh·ªèe\n‚Ä¢ √Åp d·ª•ng cold therapy v√† breathing exercises\n‚Ä¢ ƒê·ªçc 1 cu·ªën s√°ch v·ªÅ t√¢m l√Ω h·ªçc m·ªói tu·∫ßn\n‚Ä¢ L·∫≠p k·∫ø ho·∫°ch kinh doanh t·ª´ ti·ªÅn ti·∫øt ki·ªám",
                    durationDays: 14
                },
                {
                    phaseName: "Tu·∫ßn 5-6: Th·ª≠ th√°ch b·∫£n th√¢n v√† v∆∞·ª£t gi·ªõi h·∫°n",
                    phaseDescription: "‚Ä¢ Tham gia c√°c th·ª≠ th√°ch th·ªÉ ch·∫•t: ch·∫°y marathon mini, leo n√∫i\n‚Ä¢ H·ªçc c√°c k·ªπ thu·∫≠t qu·∫£n l√Ω stress c·ªßa doanh nh√¢n\n‚Ä¢ Tr·ªü th√†nh mentor cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu cai thu·ªëc\n‚Ä¢ Th·ª±c h√†nh mindfulness meditation 30 ph√∫t/ng√†y\n‚Ä¢ T·∫°o ra s·∫£n ph·∫©m s√°ng t·∫°o: blog, video, podcast v·ªÅ h√†nh tr√¨nh\n‚Ä¢ X√¢y d·ª±ng network v·ªõi c·ªông ƒë·ªìng healthy lifestyle",
                    durationDays: 14
                },
                {
                    phaseName: "Tu·∫ßn 7-8: Tr·ªü th√†nh champion v√† lan t·ªèa",
                    phaseDescription: "‚Ä¢ Ho√†n thi·ªán b·∫£n th√¢n v·ªõi l·ªëi s·ªëng ho√†n to√†n m·ªõi\n‚Ä¢ T·ªï ch·ª©c events/workshop chia s·∫ª kinh nghi·ªám\n‚Ä¢ X√¢y d·ª±ng k·∫ø ho·∫°ch d√†i h·∫°n 5-10 nƒÉm t·ªõi\n‚Ä¢ Tr·ªü th√†nh inspiration cho c·ªông ƒë·ªìng\n‚Ä¢ Ph√°t tri·ªÉn d·ª± √°n kinh doanh/charity li√™n quan ƒë·∫øn s·ª©c kh·ªèe\n‚Ä¢ L·∫≠p k·∫ø ho·∫°ch maintenance v√† continuous improvement",
                    durationDays: 14
                }
            ]
        },
        {
            id: 'basic',
            name: 'K·∫ø ho·∫°ch C∆° b·∫£n - 2 tu·∫ßn',
            description: 'K·∫ø ho·∫°ch ƒë∆°n gi·∫£n 15 ng√†y, ph√π h·ª£p v·ªõi g√≥i Basic',
            icon: 'üìù',
            color: '#1890ff',
            duration: '2 tu·∫ßn (15 ng√†y)',
            totalDays: 15,
            planDuration: 15, // Days in Basic plan
            phases: [
                {
                    phaseName: "Tu·∫ßn 1 (Ng√†y 1-7): Chu·∫©n b·ªã v√† b·∫Øt ƒë·∫ßu",
                    phaseDescription: "‚Ä¢ ƒê·∫∑t ng√†y quit smoking c·ª• th·ªÉ\n‚Ä¢ Lo·∫°i b·ªè thu·ªëc l√° v√† d·ª•ng c·ª• h√∫t thu·ªëc\n‚Ä¢ Th√¥ng b√°o v·ªõi gia ƒë√¨nh v√† b·∫°n b√®\n‚Ä¢ Chu·∫©n b·ªã tinh th·∫ßn cho th·ª≠ th√°ch\n‚Ä¢ T√¨m hi·ªÉu v·ªÅ t√°c h·∫°i c·ªßa thu·ªëc l√°",
                    durationDays: 7
                },
                {
                    phaseName: "Tu·∫ßn 2 (Ng√†y 8-15): V∆∞·ª£t qua v√† duy tr√¨",
                    phaseDescription: "‚Ä¢ S·ª≠ d·ª•ng k·ªπ thu·∫≠t th·ªü s√¢u khi th√®m thu·ªëc\n‚Ä¢ U·ªëng nhi·ªÅu n∆∞·ªõc v√† ƒÉn tr√°i c√¢y\n‚Ä¢ Tr√°nh xa nh·ªØng n∆°i th∆∞·ªùng h√∫t thu·ªëc\n‚Ä¢ T·∫≠p th·ªÉ d·ª•c nh·∫π nh√†ng\n‚Ä¢ T√¨m ho·∫°t ƒë·ªông thay th·∫ø\n‚Ä¢ C·ªßng c·ªë th√≥i quen t√≠ch c·ª±c\n‚Ä¢ ƒê√°nh gi√° ti·∫øn b·ªô ban ƒë·∫ßu",
                    durationDays: 8
                }
            ]
        },
        {
            id: 'basic-gentle',
            name: 'K·∫ø ho·∫°ch C∆° b·∫£n Nh·∫π nh√†ng - 2 tu·∫ßn',
            description: 'K·∫ø ho·∫°ch t·ª´ t·ª´ v√† d·ªÖ d√†ng h∆°n, ph√π h·ª£p cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu',
            icon: 'üå±',
            color: '#52c41a',
            duration: '2 tu·∫ßn (15 ng√†y)',
            totalDays: 15,
            planDuration: 15, // Days in Basic plan
            phases: [
                {
                    phaseName: "Tu·∫ßn 1 (Ng√†y 1-7): L√†m quen v√† gi·∫£m d·∫ßn",
                    phaseDescription: "‚Ä¢ Ghi ch√©p th√≥i quen h√∫t thu·ªëc hi·ªán t·∫°i\n‚Ä¢ Gi·∫£m 50% l∆∞·ª£ng thu·ªëc h√∫t m·ªói ng√†y\n‚Ä¢ U·ªëng n∆∞·ªõc khi mu·ªën h√∫t thu·ªëc\n‚Ä¢ Nhai k·∫πo cao su kh√¥ng ƒë∆∞·ªùng\n‚Ä¢ T·∫≠p th·ªü s√¢u 5 ph√∫t m·ªói ng√†y\n‚Ä¢ ƒêi b·ªô nh·∫π nh√†ng 15 ph√∫t sau b·ªØa ƒÉn",
                    durationDays: 7
                },
                {
                    phaseName: "Tu·∫ßn 2 (Ng√†y 8-15): Ng·ª´ng ho√†n to√†n v√† thay th·∫ø",
                    phaseDescription: "‚Ä¢ Ng·ª´ng h√∫t thu·ªëc ho√†n to√†n\n‚Ä¢ Thay th·∫ø b·∫±ng tr√† th·∫£o m·ªôc\n‚Ä¢ Nghe nh·∫°c th∆∞ gi√£n khi cƒÉng th·∫≥ng\n‚Ä¢ G·∫∑p g·ª° b·∫°n b√® kh√¥ng h√∫t thu·ªëc\n‚Ä¢ ƒÇn hoa qu·∫£ khi th√®m thu·ªëc\n‚Ä¢ T·ª± th∆∞·ªüng b·∫£n th√¢n khi ho√†n th√†nh m·ª•c ti√™u\n‚Ä¢ Chia s·∫ª v·ªõi ng∆∞·ªùi th√¢n v·ªÅ ti·∫øn b·ªô",
                    durationDays: 8
                }
            ]
        },
        {
            id: 'custom',
            name: 'T·ª± t·∫°o k·∫ø ho·∫°ch',
            description: 'T·∫°o k·∫ø ho·∫°ch ho√†n to√†n theo √Ω c·ªßa b·∫°n',
            icon: '‚úçÔ∏è',
            color: '#722ed1',
            duration: 'T√πy ch·ªânh',
            totalDays: null, // No restriction for custom plans
            planDuration: null,
            phases: []
        }
    ];

    // Filter templates based on user's purchased plan
    const getAvailableTemplates = () => {
        console.log('üîç Filtering templates based on payment info:', paymentInfo);

        // Always show all templates for user to see
        // But add indication if template requires membership
        let availableTemplates = [...allTemplateOptions];

        if (!paymentInfo) {
            // No payment - show all templates but mark which ones require membership
            console.log('üîç No payment found - showing all templates with membership indicators');
        } else {
            const userPlanName = paymentInfo.PlanName;
            console.log('üîç User plan name:', userPlanName);

            if (userPlanName) {
                if (userPlanName.toLowerCase().includes('basic') || userPlanName.toLowerCase().includes('c∆° b·∫£n')) {
                    console.log('üîç Basic plan detected - user can access basic templates');
                } else if (userPlanName.toLowerCase().includes('premium') || userPlanName.toLowerCase().includes('cao c·∫•p')) {
                    console.log('üîç Premium plan detected - user can access all templates');
                }
            }
        }

        console.log('‚úÖ Available templates:', availableTemplates.map(t => t.id));
        return availableTemplates;
    };

    // Check if user can access a specific template
    const canAccessTemplate = (template) => {
        console.log('üîç Checking access for template:', template.id, {
            paymentInfo,
            planName: paymentInfo?.PlanName,
            templateId: template.id
        });

        if (template.id === 'custom') {
            console.log('‚úÖ Custom template - access granted');
            return true; // Everyone can access custom template
        }

        // Temporary fix: Check user role from localStorage
        const user = JSON.parse(localStorage.getItem('user') || '{}');
        const userRole = user.role || 'guest';
        
        console.log('üë§ User role:', userRole);

        // If user is not guest (meaning they have some membership), allow access
        if (userRole !== 'guest') {
            console.log('‚úÖ User has membership role - access granted');
            return true;
        }

        if (!paymentInfo) {
            console.log('‚ùå No payment info - access denied');
            return false; // No payment - can't access premium templates
        }

        const userPlanName = paymentInfo.PlanName;
        if (!userPlanName) {
            console.log('‚ùå No plan name - access denied');
            return false;
        }

        console.log('üîç Checking plan name:', userPlanName);

        if (userPlanName.toLowerCase().includes('basic') || userPlanName.toLowerCase().includes('c∆° b·∫£n')) {
            // Basic plan can access basic templates
            const hasAccess = template.id === 'basic' || template.id === 'basic-gentle';
            console.log('üì¶ Basic plan - access:', hasAccess, 'for template:', template.id);
            return hasAccess;
        } else if (userPlanName.toLowerCase().includes('premium') || userPlanName.toLowerCase().includes('cao c·∫•p')) {
            // Premium plan can access all templates
            console.log('üíé Premium plan - full access granted');
            return true;
        }

        console.log('‚ùå Unknown plan type - access denied');
        return false;
    };

    useEffect(() => {
        if (currentStep === 0) {
            // Reset selected template when templates change
            setSelectedTemplate(null);
        }
    }, [paymentInfo]);

    // Check for success message from navigation state
    useEffect(() => {
        if (location.state?.justCreated) {
            setJustCreatedPlan(true);
            message.success(location.state.message || 'K·∫ø ho·∫°ch ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!');

            // Clear the state after showing the message
            window.history.replaceState({}, document.title);

            // Auto-hide the notification after 10 seconds
            setTimeout(() => {
                setJustCreatedPlan(false);
            }, 10000);
        }
    }, [location.state]);

    // Check survey completion status
    useEffect(() => {
        const checkSurveyCompletion = async () => {
            try {
                setSurveyLoading(true);
                
                // Get the token from localStorage
                const token = localStorage.getItem('token');
                if (!token) {
                    console.log('No token found, user not logged in');
                    setSurveyLoading(false);
                    return;
                }

                // Check user's survey answers
                const answersResponse = await axios.get('/api/smoking-addiction-survey/my-answers', {                    headers: {
                        Authorization: `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (answersResponse.data && Array.isArray(answersResponse.data)) {
                    // If user has 10 or more answers, consider survey completed
                    if (answersResponse.data.length >= 10) {
                        setSurveyCompleted(true);
                        console.log('Survey completed, user can access quit plans');
                    } else {
                        setSurveyCompleted(false);
                        console.log('Survey not completed, user needs to complete survey first');
                    }
                } else {
                    setSurveyCompleted(false);
                }

                setSurveyLoading(false);
            } catch (error) {
                console.error('Error checking survey completion:', error);
                setSurveyCompleted(false);
                setSurveyLoading(false);
            }
        };

        checkSurveyCompletion();
    }, []);

    // Load data
    useEffect(() => {
        const loadData = async () => {
            try {
                setLoading(true);

                // Get existing quit plans and templates
                const response = await api.get('/api/quit-plan');
                console.log('‚úÖ Quit plan response:', response.data);

                setExistingPlans(response.data.data || []);
                setPlanTemplate(response.data.planTemplate || []);
                setPaymentInfo(response.data.paymentInfo || null);

                // If user has existing plans, populate the form with the latest active plan (including pending_cancellation)
                const activePlans = response.data.data.filter(plan => plan.Status === 'active' || plan.Status === 'pending_cancellation');
                if (activePlans.length > 0) {
                    const latestPlan = activePlans[0];
                    form.setFieldsValue({
                        startDate: latestPlan.StartDate ? dayjs(latestPlan.StartDate) : null,
                        targetDate: latestPlan.TargetDate ? dayjs(latestPlan.TargetDate) : null,
                        reason: latestPlan.Reason,
                        motivationLevel: latestPlan.MotivationLevel,
                        detailedPlan: latestPlan.DetailedPlan
                    });
                } else if (response.data.planTemplate && response.data.planTemplate.length > 0) {
                    // Auto-fill detailed plan with template if no existing plans
                    const templateText = response.data.planTemplate.map((phase, index) =>
                        `${phase.PhaseName || phase.phaseName}:\n${phase.PhaseDescription || phase.phaseDescription}\n`
                    ).join('\n');

                    form.setFieldsValue({
                        detailedPlan: templateText
                    });
                }

            } catch (error) {
                console.error('‚ùå Error loading quit plan data:', error);
                message.error('L·ªói khi t·∫£i d·ªØ li·ªáu k·∫ø ho·∫°ch cai thu·ªëc');
            } finally {
                setLoading(false);
            }
        };

        loadData();
    }, [form]);

    // New workflow functions
    const handleTemplateSelect = (template) => {
        console.log('üéØ Template selected:', template);
        
        // Check if user can access this template
        if (!canAccessTemplate(template)) {
            // Show message about needing membership
            message.warning({
                content: (
                    <div>
                        <div>üîí Template n√†y y√™u c·∫ßu g√≥i membership!</div>
                        <div style={{ fontSize: '12px', marginTop: '4px' }}>
                            {template.id.includes('premium') ? 
                                'C·∫ßn g√≥i Premium ƒë·ªÉ s·ª≠ d·ª•ng template n√†y' : 
                                'C·∫ßn g√≥i Basic ho·∫∑c Premium ƒë·ªÉ s·ª≠ d·ª•ng template n√†y'
                            }
                        </div>
                    </div>
                ),
                duration: 4
            });
            // Navigate to membership page
            setTimeout(() => {
                navigate('/membership');
            }, 1000);
            return;
        }

        // Navigate to template detail page if user has access
        navigate(`/quit-plan/template/${template.id}`, {
            state: { template: template }
        });
    };

    const getStatusColor = (status) => {
        const colors = { 'active': 'green', 'completed': 'blue', 'paused': 'orange', 'cancelled': 'red' };
        return colors[status] || 'default';
    };

    const getStatusText = (status) => {
        const texts = { 'active': 'ƒêang ho·∫°t ƒë·ªông', 'completed': 'Ho√†n th√†nh', 'paused': 'T·∫°m d·ª´ng', 'cancelled': 'ƒê√£ h·ªßy' };
        return texts[status] || status;
    };

    const calculateDaysToTarget = (targetDate) => {
        const today = dayjs();
        const target = dayjs(targetDate);
        return target.diff(today, 'day');
    };

    const handleRetry = () => {
        setLoading(true);
        window.location.reload();
    };

    const ProgressLogs = ({ existingPlans, setActiveTab }) => {
        const [logs, setLogs] = useState([]);
        const [logsLoading, setLogsLoading] = useState(true);
        const [logForm] = Form.useForm();
        const [logSubmitting, setLogSubmitting] = useState(false);
        // Success rate states disabled - no longer showing success rate analysis
        // const [successRate, setSuccessRate] = useState(null);
        // const [successLoading, setSuccessLoading] = useState(false);
        // Removed dailySuccessRates state - now calculating inline for better performance

        // Only show logs for members with active plans (including pending_cancellation)
        const activePlans = existingPlans.filter(plan => plan.Status === 'active' || plan.Status === 'pending_cancellation');
        
        // Debug logging removed - Success Rate Analysis disabled

        const loadProgressData = async () => {
            if (activePlans.length === 0) {
                setLogsLoading(false);
                return;
            }

            try {
                // G·ªçi API progress range ƒë·ªÉ l·∫•y data trong 30 ng√†y g·∫ßn ƒë√¢y
                const endDate = dayjs().format('YYYY-MM-DD');
                const startDate = dayjs().subtract(30, 'day').format('YYYY-MM-DD');

                const response = await api.get(`/api/progress/range?startDate=${startDate}&endDate=${endDate}`);
                console.log('‚úÖ Progress logs response:', response.data);

                if (response.data.success) {
                    setLogs(response.data.data || []);
                } else {
                    console.log('‚ö†Ô∏è No progress data available');
                    setLogs([]);
                }
            } catch (error) {
                console.error('‚ùå Error loading progress data:', error);
                setLogs([]);
            } finally {
                setLogsLoading(false);
            }
        };

        useEffect(() => {
            loadProgressData();
            // loadSuccessRate(); // Disabled - no longer showing success rate analysis
        }, [activePlans.length]);

        // loadSuccessRate function removed - Success Rate Analysis disabled

        // Removed loadDailySuccessRates - now calculating inline for better performance

        const handleProgressSubmit = async (values) => {
            try {
                setLogSubmitting(true);
                console.log('üìù Submitting progress log:', values);

                const submitData = {
                    date: dayjs().format('YYYY-MM-DD'), // Th√™m ng√†y hi·ªán t·∫°i
                    cigarettesSmoked: values.cigarettesSmoked || 0,
                    cravingLevel: values.cravingLevel || 1,
                    emotionNotes: values.emotionNotes || ''
                    // X√≥a b·ªè c√°c tr∆∞·ªùng kh√¥ng c·∫ßn thi·∫øt
                };

                const response = await api.post('/api/progress', submitData);
                console.log('‚úÖ Progress submitted:', response.data);

                if (response.data.success) {
                    message.success('üéâ ƒê√£ ghi l·∫°i ti·∫øn tr√¨nh h√¥m nay!');
                    logForm.resetFields();
                    loadProgressData(); // Reload progress data 
                    // loadSuccessRate(); // Reload success rate - DISABLED
                    // Daily success rates now calculated inline - no need to reload
                } else {
                    message.error(response.data.message || 'L·ªói khi ghi l·∫°i ti·∫øn tr√¨nh');
                }

            } catch (error) {
                console.error('‚ùå Error submitting progress:', error);
                if (error.response?.status === 409) {
                    message.warning('B·∫°n ƒë√£ ghi l·∫°i ti·∫øn tr√¨nh h√¥m nay r·ªìi. H√£y quay l·∫°i v√†o ng√†y mai!');
                } else {
                    message.error('L·ªói khi ghi l·∫°i ti·∫øn tr√¨nh. Vui l√≤ng th·ª≠ l·∫°i.');
                }
            } finally {
                setLogSubmitting(false);
            }
        };

        // üî• NEW: Calculate success rate for a specific day (inline calculation)
        const calculateDailySuccessRate = (currentDate, allLogs) => {
            if (!allLogs || allLogs.length === 0) {
                console.log('‚ö†Ô∏è No logs available for calculation');
                return null;
            }

            // Get logs up to current date (cumulative)
            const currentDateStr = dayjs(currentDate).format('YYYY-MM-DD');
            const logsUpToDate = allLogs
                .filter(log => dayjs(log.Date).format('YYYY-MM-DD') <= currentDateStr)
                .sort((a, b) => new Date(a.Date) - new Date(b.Date));

            if (logsUpToDate.length === 0) return null;

            const totalDays = logsUpToDate.length;
            const baselineCigarettes = 10; // Default baseline

            // 1. Cigarette Reduction Factor (40% weight)
            const recentDays = Math.min(7, totalDays);
            const recentData = logsUpToDate.slice(-recentDays);
            const averageRecentCigarettes = recentData.reduce((sum, log) => sum + log.CigarettesSmoked, 0) / recentDays;
            const cigaretteReduction = Math.max(0, (baselineCigarettes - averageRecentCigarettes) / baselineCigarettes);
            const cigaretteFactor = Math.min(100, cigaretteReduction * 100);

            // 2. Craving Control Factor (30% weight)
            const averageCraving = logsUpToDate.reduce((sum, log) => sum + log.CravingLevel, 0) / totalDays;
            const cravingFactor = Math.max(0, (10 - averageCraving) / 10 * 100);

            // 3. Consistency Factor (20% weight)
            const smokeFreeDays = logsUpToDate.filter(log => log.CigarettesSmoked === 0).length;
            const smokeFreeRate = smokeFreeDays / totalDays;
            const consistencyFactor = smokeFreeRate * 100;

            // 4. Improvement Trend Factor (10% weight)
            let trendFactor = 50; // Neutral default
            if (totalDays >= 3) {
                const firstHalf = logsUpToDate.slice(0, Math.floor(totalDays / 2));
                const secondHalf = logsUpToDate.slice(Math.floor(totalDays / 2));
                
                const firstHalfAvg = firstHalf.reduce((sum, log) => sum + log.CigarettesSmoked, 0) / firstHalf.length;
                const secondHalfAvg = secondHalf.reduce((sum, log) => sum + log.CigarettesSmoked, 0) / secondHalf.length;
                
                const improvement = Math.max(0, (firstHalfAvg - secondHalfAvg) / baselineCigarettes);
                trendFactor = Math.min(100, 50 + improvement * 100);
            }

            // Calculate weighted success rate
            const successRate = Math.round(
                cigaretteFactor * 0.4 +
                cravingFactor * 0.3 +
                consistencyFactor * 0.2 +
                trendFactor * 0.1
            );

            // üîç DETAILED DEBUG for first day
            if (totalDays === 1) {
                const currentLog = logsUpToDate[0];
                console.log('üßÆ DETAILED CALCULATION BREAKDOWN for', dayjs(currentDate).format('DD/MM/YYYY'));
                console.log('üìä D·ªØ li·ªáu ng√†y:', {
                    cigarettesSmoked: currentLog.CigarettesSmoked,
                    cravingLevel: currentLog.CravingLevel,
                    totalDays
                });
                console.log('üéØ 1. Cigarette Reduction Factor (40% weight):');
                console.log(`   üìâ Baseline: ${baselineCigarettes} ƒëi·∫øu/ng√†y`);
                console.log(`   üìà H√¥m nay: ${currentLog.CigarettesSmoked} ƒëi·∫øu`);
                console.log(`   üßÆ Gi·∫£m ƒë∆∞·ª£c: ${baselineCigarettes - currentLog.CigarettesSmoked} ƒëi·∫øu`);
                console.log(`   üìä T·ªâ l·ªá gi·∫£m: ${cigaretteReduction.toFixed(2)} = ${cigaretteFactor.toFixed(1)}%`);
                console.log(`   ‚öñÔ∏è C√≥ tr·ªçng s·ªë 40%: ${(cigaretteFactor * 0.4).toFixed(1)} ƒëi·ªÉm`);
                
                console.log('üéØ 2. Craving Control Factor (30% weight):');
                console.log(`   üî• M·ª©c th√®m h√¥m nay: ${currentLog.CravingLevel}/10`);
                console.log(`   üìä Ki·ªÉm so√°t ƒë∆∞·ª£c: ${(10 - currentLog.CravingLevel)}/10 = ${cravingFactor.toFixed(1)}%`);
                console.log(`   ‚öñÔ∏è C√≥ tr·ªçng s·ªë 30%: ${(cravingFactor * 0.3).toFixed(1)} ƒëi·ªÉm`);
                
                console.log('üéØ 3. Consistency Factor (20% weight):');
                console.log(`   üö≠ Ng√†y kh√¥ng h√∫t: ${smokeFreeDays}/${totalDays} ng√†y`);
                console.log(`   üìä T·ªâ l·ªá nh·∫•t qu√°n: ${consistencyFactor.toFixed(1)}%`);
                console.log(`   ‚öñÔ∏è C√≥ tr·ªçng s·ªë 20%: ${(consistencyFactor * 0.2).toFixed(1)} ƒëi·ªÉm`);
                
                console.log('üéØ 4. Improvement Trend Factor (10% weight):');
                console.log(`   üìà Ng√†y ƒë·∫ßu ti√™n - d√πng m·ª©c trung t√≠nh: ${trendFactor}%`);
                console.log(`   ‚öñÔ∏è C√≥ tr·ªçng s·ªë 10%: ${(trendFactor * 0.1).toFixed(1)} ƒëi·ªÉm`);
                
                console.log('üèÜ T·ªîNG K·∫æT:');
                console.log(`   üßÆ C√¥ng th·ª©c: ${cigaretteFactor.toFixed(1)}√ó0.4 + ${cravingFactor.toFixed(1)}√ó0.3 + ${consistencyFactor.toFixed(1)}√ó0.2 + ${trendFactor}√ó0.1`);
                console.log(`   üßÆ = ${(cigaretteFactor * 0.4).toFixed(1)} + ${(cravingFactor * 0.3).toFixed(1)} + ${(consistencyFactor * 0.2).toFixed(1)} + ${(trendFactor * 0.1).toFixed(1)}`);
                console.log(`   üèÜ = ${successRate}%`);
            }

            return {
                successRate,
                daysTracked: totalDays,
                factors: {
                    cigaretteReduction: Math.round(cigaretteFactor),
                    cravingControl: Math.round(cravingFactor),
                    consistency: Math.round(consistencyFactor),
                    trend: Math.round(trendFactor)
                }
            };
        };

        // Calculate trend compared to previous day
        const calculateTrend = (currentDate, allLogs) => {
            const sortedLogs = allLogs
                .sort((a, b) => new Date(a.Date) - new Date(b.Date));
            
            const currentIndex = sortedLogs.findIndex(log => 
                dayjs(log.Date).format('YYYY-MM-DD') === dayjs(currentDate).format('YYYY-MM-DD')
            );

            if (currentIndex <= 0) return { trend: 'stable', trendChange: 0 };

            const currentRate = calculateDailySuccessRate(currentDate, allLogs);
            const previousDate = sortedLogs[currentIndex - 1].Date;
            const previousRate = calculateDailySuccessRate(previousDate, allLogs);

            if (!currentRate || !previousRate) return { trend: 'stable', trendChange: 0 };

            const trendChange = currentRate.successRate - previousRate.successRate;
            let trend = 'stable';
            
            if (trendChange > 2) trend = 'up';
            else if (trendChange < -2) trend = 'down';

            return { trend, trendChange };
        };

        // Show message if no active plans
        if (activePlans.length === 0) {
            return (
                <div className="text-center py-12">
                    <div className="mb-4">
                        <ExclamationCircleOutlined style={{ fontSize: '48px', color: '#faad14' }} />
                    </div>
                    <Title level={3}>Ch∆∞a c√≥ k·∫ø ho·∫°ch n√†o ƒëang ho·∫°t ƒë·ªông</Title>
                    <Paragraph className="text-gray-600 mb-6">
                        B·∫°n c·∫ßn t·∫°o m·ªôt k·∫ø ho·∫°ch cai thu·ªëc tr∆∞·ªõc khi c√≥ th·ªÉ ghi l·∫°i ti·∫øn tr√¨nh h√†ng ng√†y.
                    </Paragraph>
                    <Button
                        type="primary"
                        size="large"
                        icon={<PlusOutlined />}
                        onClick={() => setActiveTab('plan')}
                    >
                        T·∫°o k·∫ø ho·∫°ch ngay
                    </Button>
                </div>
            );
        }

        return (
            <div className="space-y-6">
                <Card
                    title={
                        <div className="flex items-center">
                            <BookOutlined className="mr-2 text-blue-500" />
                            <span>Ghi l·∫°i ti·∫øn tr√¨nh h√¥m nay</span>
                        </div>
                    }
                    className="shadow-md"
                >
                    <Form
                        form={logForm}
                        layout="vertical"
                        onFinish={handleProgressSubmit}
                        className="max-w-2xl"
                    >
                        <Row gutter={16}>
                            <Col xs={24} sm={12}>
                                <Form.Item
                                    label="S·ªë ƒëi·∫øu h√∫t h√¥m nay"
                                    name="cigarettesSmoked"
                                    rules={[
                                        { required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·∫øu h√∫t' },
                                        { type: 'number', min: 0, message: 'S·ªë ƒëi·∫øu kh√¥ng ƒë∆∞·ª£c √¢m' }
                                    ]}
                                >
                                    <InputNumber
                                        min={0}
                                        style={{ width: '100%' }}
                                        placeholder="Nh·∫≠p s·ªë ƒëi·∫øu h√∫t h√¥m nay"
                                        addonAfter="ƒëi·∫øu"
                                    />
                                </Form.Item>
                            </Col>

                            <Col xs={24} sm={12}>
                                <Form.Item
                                    label="M·ª©c ƒë·ªô th√®m thu·ªëc (1-10)"
                                    name="cravingLevel"
                                    rules={[
                                        { required: true, message: 'Vui l√≤ng ƒë√°nh gi√° m·ª©c ƒë·ªô th√®m thu·ªëc' },
                                        { type: 'number', min: 1, max: 10, message: 'M·ª©c ƒë·ªô ph·∫£i t·ª´ 1-10' }
                                    ]}
                                >
                                    <InputNumber
                                        min={1}
                                        max={10}
                                        style={{ width: '100%' }}
                                        placeholder="1 = r·∫•t th·∫•p, 10 = r·∫•t cao"
                                    />
                                </Form.Item>
                            </Col>
                        </Row>

                        <Form.Item
                            label="Ghi ch√∫ c·∫£m x√∫c"
                            name="emotionNotes"
                        >
                            <TextArea
                                rows={3}
                                placeholder="M√¥ t·∫£ c·∫£m x√∫c, t√¢m tr·∫°ng h√¥m nay..."
                            />
                        </Form.Item>

                        <Form.Item>
                            <Button
                                type="primary"
                                htmlType="submit"
                                loading={logSubmitting}
                                icon={<SaveOutlined />}
                                size="large"
                            >
                                L∆∞u ti·∫øn tr√¨nh h√¥m nay
                            </Button>
                        </Form.Item>
                    </Form>
                </Card>

                {/* Success Rate Analysis - DISABLED */}
                {false && (
                    <Card
                        title={
                            <div className="flex items-center">
                                <TrophyOutlined className="mr-2 text-yellow-500" />
                                <span>T·ªâ l·ªá th√†nh c√¥ng cai nghi·ªán</span>
                                <Tag color={
                                    successRate.confidence === 'high' ? 'green' : 
                                    successRate.confidence === 'medium' ? 'orange' : 'red'
                                } style={{ marginLeft: '12px' }}>
                                    {successRate.confidence === 'high' ? 'ƒê·ªô tin c·∫≠y cao' :
                                     successRate.confidence === 'medium' ? 'ƒê·ªô tin c·∫≠y trung b√¨nh' : 'ƒê·ªô tin c·∫≠y th·∫•p'}
                                </Tag>
                            </div>
                        }
                        className="shadow-md"
                        loading={successLoading}
                        style={{ marginBottom: '24px' }}
                    >
                        {/* Main Success Rate Display */}
                        <div style={{
                            background: `linear-gradient(135deg, ${successRate.successRate >= 70 ? '#f6ffed' : successRate.successRate >= 50 ? '#fff7e6' : '#fff1f0'} 0%, ${successRate.successRate >= 70 ? '#d1fae5' : successRate.successRate >= 50 ? '#fef3c7' : '#fecaca'} 100%)`,
                            borderRadius: '16px',
                            padding: '24px',
                            marginBottom: '24px',
                            textAlign: 'center',
                            border: `2px solid ${successRate.successRate >= 70 ? '#10b981' : successRate.successRate >= 50 ? '#f59e0b' : '#ef4444'}`
                        }}>
                            <div style={{
                                fontSize: '48px',
                                fontWeight: 'bold',
                                color: successRate.successRate >= 70 ? '#065f46' : successRate.successRate >= 50 ? '#92400e' : '#7f1d1d',
                                marginBottom: '8px'
                            }}>
                                {successRate.successRate}%
                            </div>
                            <Text style={{
                                fontSize: '18px',
                                color: successRate.successRate >= 70 ? '#065f46' : successRate.successRate >= 50 ? '#92400e' : '#7f1d1d',
                                fontWeight: 600
                            }}>
                                T·ªâ l·ªá th√†nh c√¥ng ∆∞·ªõc t√≠nh
                            </Text>
                            <div style={{ fontSize: '12px', color: '#6b7280', marginTop: '8px' }}>
                                D·ª±a tr√™n {successRate.daysTracked} ng√†y ti·∫øn tr√¨nh
                            </div>
                        </div>

                        {/* Factors Breakdown */}
                        <div style={{ marginBottom: '20px' }}>
                            <Title level={5} style={{ marginBottom: '16px', color: '#374151' }}>
                                üìä Ph√¢n t√≠ch chi ti·∫øt
                            </Title>
                            
                            <Row gutter={[12, 12]}>
                                {Object.entries(successRate.factors).map(([key, factor]) => (
                                    <Col xs={24} sm={12} key={key}>
                                        <div style={{
                                            background: 'rgba(255, 255, 255, 0.8)',
                                            borderRadius: '12px',
                                            padding: '16px',
                                            border: '1px solid #e5e7eb'
                                        }}>
                                            <div style={{
                                                display: 'flex',
                                                justifyContent: 'space-between',
                                                alignItems: 'center',
                                                marginBottom: '8px'
                                            }}>
                                                <Text strong style={{ fontSize: '14px' }}>
                                                    {key === 'cigaretteReduction' ? 'üö¨ Gi·∫£m thu·ªëc l√°' :
                                                     key === 'cravingControl' ? 'üí≠ Ki·ªÉm so√°t th√®m' :
                                                     key === 'consistency' ? '‚úÖ Nh·∫•t qu√°n' : 'üìà Xu h∆∞·ªõng'}
                                                </Text>
                                                <div style={{
                                                    background: factor.score >= 70 ? '#10b981' : factor.score >= 50 ? '#f59e0b' : '#ef4444',
                                                    color: 'white',
                                                    padding: '2px 8px',
                                                    borderRadius: '12px',
                                                    fontSize: '12px',
                                                    fontWeight: 600
                                                }}>
                                                    {factor.score}%
                                                </div>
                                            </div>
                                            <Text style={{ fontSize: '12px', color: '#6b7280' }}>
                                                {factor.description}
                                            </Text>
                                            <div style={{
                                                fontSize: '11px',
                                                color: '#9ca3af',
                                                marginTop: '4px'
                                            }}>
                                                Tr·ªçng s·ªë: {factor.weight}
                                            </div>
                                        </div>
                                    </Col>
                                ))}
                            </Row>
                        </div>

                        {/* Insights and Recommendations */}
                        {successRate.insights && successRate.insights.length > 0 && (
                            <div style={{ marginBottom: '16px' }}>
                                <Title level={5} style={{ marginBottom: '12px', color: '#374151' }}>
                                    üí° Nh·∫≠n x√©t
                                </Title>
                                <div style={{
                                    background: '#f8f9ff',
                                    borderRadius: '8px',
                                    padding: '12px',
                                    border: '1px solid #d6e4ff'
                                }}>
                                    {successRate.insights.map((insight, index) => (
                                        <div key={index} style={{
                                            marginBottom: index < successRate.insights.length - 1 ? '8px' : '0',
                                            fontSize: '14px'
                                        }}>
                                            {insight}
                                        </div>
                                    ))}
                                </div>
                            </div>
                        )}

                        {successRate.recommendations && successRate.recommendations.length > 0 && (
                            <div>
                                <Title level={5} style={{ marginBottom: '12px', color: '#374151' }}>
                                    üéØ Khuy·∫øn ngh·ªã
                                </Title>
                                <div style={{
                                    background: '#fefce8',
                                    borderRadius: '8px',
                                    padding: '12px',
                                    border: '1px solid #fde047'
                                }}>
                                    {successRate.recommendations.map((rec, index) => (
                                        <div key={index} style={{
                                            marginBottom: index < successRate.recommendations.length - 1 ? '8px' : '0',
                                            fontSize: '14px'
                                        }}>
                                            ‚Ä¢ {rec}
                                        </div>
                                    ))}
                                </div>
                            </div>
                        )}

                        {/* Calculation Method Info */}
                        <div style={{
                            marginTop: '16px',
                            padding: '12px',
                            backgroundColor: '#f1f5f9',
                            borderRadius: '8px',
                            border: '1px solid #cbd5e1'
                        }}>
                            <Text style={{ fontSize: '12px', color: '#475569', fontStyle: 'italic' }}>
                                üìä <strong>Ph∆∞∆°ng ph√°p t√≠nh:</strong> {successRate.calculation?.formula}
                                <br />
                                üíæ <strong>Ngu·ªìn d·ªØ li·ªáu:</strong> {successRate.calculation?.dataSource}
                                <br />
                                ‚è∞ C·∫≠p nh·∫≠t: {new Date(successRate.calculation?.lastUpdated).toLocaleString('vi-VN')}
                            </Text>
                        </div>
                    </Card>
                )}

                {/* Progress History */}
                <Card
                    title={
                        <div className="flex items-center">
                            <LineChartOutlined className="mr-2 text-green-500" />
                            <span>L·ªãch s·ª≠ ti·∫øn tr√¨nh</span>
                        </div>
                    }
                    className="shadow-md"
                    loading={logsLoading}
                >
                    {logs.length > 0 ? (
                        <List
                            dataSource={logs}
                            renderItem={(log) => {
                                // üî• Calculate success rate for this day
                                const dailyRate = calculateDailySuccessRate(log.Date, logs);
                                const trendInfo = calculateTrend(log.Date, logs);
                                
                                console.log('üìä Daily rate for', dayjs(log.Date).format('DD/MM/YYYY'), ':', dailyRate, 'Trend:', trendInfo);
                                
                                return (
                                    <List.Item style={{ padding: 0, marginBottom: '16px' }}>
                                        <Card
                                            className="w-full"
                                            style={{
                                                borderRadius: '12px',
                                                boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                                                border: '1px solid #f0f0f0'
                                            }}
                                            bodyStyle={{ padding: '20px' }}
                                        >
                                        {/* Header v·ªõi ng√†y v√† success rate */}
                                        <div style={{
                                            display: 'flex',
                                            alignItems: 'center',
                                            justifyContent: 'space-between',
                                            marginBottom: '16px',
                                            paddingBottom: '12px',
                                            borderBottom: '1px solid #f0f0f0'
                                        }}>
                                            <div style={{ display: 'flex', alignItems: 'center' }}>
                                                <CalendarOutlined style={{
                                                    fontSize: '16px',
                                                    color: '#1890ff',
                                                    marginRight: '8px'
                                                }} />
                                                <Title level={5} style={{
                                                    margin: 0,
                                                    color: '#1890ff',
                                                    fontSize: '16px',
                                                    fontWeight: '600'
                                                }}>
                                                    {dayjs(log.Date).format('DD/MM/YYYY')}
                                                </Title>
                                            </div>

                                            {/* Success Rate Indicator */}
                                            {dailyRate && (
                                                <div style={{
                                                    display: 'flex',
                                                    alignItems: 'center',
                                                    gap: '8px'
                                                }}>
                                                    {/* Trend Arrow */}
                                                    {trendInfo.trend === 'up' && (
                                                        <div style={{
                                                            color: '#52c41a',
                                                            fontSize: '14px',
                                                            fontWeight: 'bold'
                                                        }}>
                                                            ‚Üó +{trendInfo.trendChange}%
                                                        </div>
                                                    )}
                                                    {trendInfo.trend === 'down' && (
                                                        <div style={{
                                                            color: '#ff4d4f',
                                                            fontSize: '14px',
                                                            fontWeight: 'bold'
                                                        }}>
                                                            ‚Üò {trendInfo.trendChange}%
                                                        </div>
                                                    )}
                                                    {trendInfo.trend === 'stable' && dailyRate && dailyRate.daysTracked > 1 && (
                                                        <div style={{
                                                            color: '#8c8c8c',
                                                            fontSize: '12px'
                                                        }}>
                                                            ‚Üí ·ªïn ƒë·ªãnh
                                                        </div>
                                                    )}

                                                    {/* Success Rate Badge */}
                                                    {dailyRate ? (
                                                        <Tooltip 
                                                            title={
                                                                <div>
                                                                    <div style={{ fontWeight: 'bold', marginBottom: '4px' }}>
                                                                        üèÜ T·ª∑ l·ªá th√†nh c√¥ng: {dailyRate.successRate}%
                                                                    </div>
                                                                    <div style={{ fontSize: '12px' }}>
                                                                        T·ª∑ l·ªá th√†nh c√¥ng trong vi·ªác cai thu·ªëc d·ª±a tr√™n:
                                                                    </div>
                                                                    <div style={{ fontSize: '12px', marginTop: '4px' }}>
                                                                        ‚Ä¢ S·ªë ng√†y kh√¥ng h√∫t thu·ªëc
                                                                    </div>
                                                                    <div style={{ fontSize: '12px' }}>
                                                                        ‚Ä¢ M·ª©c ƒë·ªô tu√¢n th·ªß k·∫ø ho·∫°ch
                                                                    </div>
                                                                    <div style={{ fontSize: '12px' }}>
                                                                        ‚Ä¢ Ti·∫øn ƒë·ªô ƒë·∫°t m·ª•c ti√™u
                                                                    </div>
                                                                    <div style={{ fontSize: '11px', marginTop: '6px', opacity: 0.8 }}>
                                                                        {dailyRate.successRate >= 70 ? 'üü¢ Xu·∫•t s·∫Øc! Ti·∫øp t·ª•c ph√°t huy!' : 
                                                                         dailyRate.successRate >= 50 ? 'üü° Kh√° t·ªët, c·∫ßn c·∫£i thi·ªán th√™m' : 
                                                                         'üî¥ C·∫ßn n·ªó l·ª±c h∆°n ƒë·ªÉ ƒë·∫°t m·ª•c ti√™u'}
                                                                    </div>
                                                                </div>
                                                            }
                                                            placement="top"
                                                        >
                                                            <div style={{
                                                                background: dailyRate.successRate >= 70 ? 
                                                                    'linear-gradient(135deg, #52c41a 0%, #389e0d 100%)' :
                                                                    dailyRate.successRate >= 50 ? 
                                                                    'linear-gradient(135deg, #faad14 0%, #d48806 100%)' :
                                                                    'linear-gradient(135deg, #ff4d4f 0%, #cf1322 100%)',
                                                                color: 'white',
                                                                padding: '4px 12px',
                                                                borderRadius: '20px',
                                                                fontSize: '13px',
                                                                fontWeight: '600',
                                                                boxShadow: '0 2px 6px rgba(0,0,0,0.15)',
                                                                display: 'flex',
                                                                alignItems: 'center',
                                                                gap: '4px',
                                                                cursor: 'pointer'
                                                            }}>
                                                                <TrophyOutlined style={{ fontSize: '12px' }} />
                                                                {dailyRate.successRate}%
                                                            </div>
                                                        </Tooltip>
                                                    ) : (
                                                        <Tooltip 
                                                            title="ƒêang t√≠nh to√°n t·ª∑ l·ªá th√†nh c√¥ng d·ª±a tr√™n d·ªØ li·ªáu cai thu·ªëc c·ªßa b·∫°n..."
                                                            placement="top"
                                                        >
                                                            <div style={{
                                                                background: 'linear-gradient(135deg, #8c8c8c 0%, #595959 100%)',
                                                                color: 'white',
                                                                padding: '4px 12px',
                                                                borderRadius: '20px',
                                                                fontSize: '12px',
                                                                fontWeight: '600',
                                                                boxShadow: '0 2px 6px rgba(0,0,0,0.15)',
                                                                display: 'flex',
                                                                alignItems: 'center',
                                                                gap: '4px',
                                                                cursor: 'pointer'
                                                            }}>
                                                                <TrophyOutlined style={{ fontSize: '11px' }} />
                                                                T√≠nh to√°n...
                                                            </div>
                                                        </Tooltip>
                                                    )}
                                                </div>
                                            )}
                                        </div>

                                        {/* Th·ªëng k√™ ch√≠nh */}
                                        <Row gutter={[12, 12]} style={{ marginBottom: '16px' }}>
                                            <Col span={6}>
                                                <div style={{
                                                    textAlign: 'center',
                                                    padding: '10px',
                                                    backgroundColor: log.CigarettesSmoked === 0 ? '#f6ffed' : '#fff2e8',
                                                    borderRadius: '8px',
                                                    border: `1px solid ${log.CigarettesSmoked === 0 ? '#b7eb8f' : '#ffb38a'}`
                                                }}>
                                                    <div style={{
                                                        fontSize: '20px',
                                                        fontWeight: 'bold',
                                                        color: log.CigarettesSmoked === 0 ? '#52c41a' : '#fa541c',
                                                        marginBottom: '4px'
                                                    }}>
                                                        {log.CigarettesSmoked}
                                                    </div>
                                                    <div style={{
                                                        fontSize: '11px',
                                                        color: '#666',
                                                        fontWeight: '500'
                                                    }}>
                                                        üö¨ ƒêi·∫øu h√∫t
                                                    </div>
                                                </div>
                                            </Col>

                                            <Col span={6}>
                                                {(() => {
                                                    const baseline = 10; // 10 ƒëi·∫øu/ng√†y baseline
                                                    const cigarettesAvoided = Math.max(0, baseline - log.CigarettesSmoked);
                                                    return (
                                                        <div style={{
                                                            textAlign: 'center',
                                                            padding: '10px',
                                                            backgroundColor: cigarettesAvoided >= 8 ? '#f6ffed' : cigarettesAvoided >= 5 ? '#fff7e6' : '#fff1f0',
                                                            borderRadius: '8px',
                                                            border: `1px solid ${cigarettesAvoided >= 8 ? '#b7eb8f' : cigarettesAvoided >= 5 ? '#ffd591' : '#ffadd2'}`
                                                        }}>
                                                            <div style={{
                                                                fontSize: '20px',
                                                                fontWeight: 'bold',
                                                                color: cigarettesAvoided >= 8 ? '#52c41a' : cigarettesAvoided >= 5 ? '#fa8c16' : '#f5222d',
                                                                marginBottom: '4px'
                                                            }}>
                                                                {cigarettesAvoided}
                                                            </div>
                                                            <div style={{
                                                                fontSize: '11px',
                                                                color: '#666',
                                                                fontWeight: '500'
                                                            }}>
                                                                ‚úã Tr√°nh ƒë∆∞·ª£c
                                                            </div>
                                                        </div>
                                                    );
                                                })()}
                                            </Col>

                                            <Col span={6}>
                                                <div style={{
                                                    textAlign: 'center',
                                                    padding: '10px',
                                                    backgroundColor: log.CravingLevel <= 3 ? '#f6ffed' : log.CravingLevel <= 7 ? '#fff7e6' : '#fff1f0',
                                                    borderRadius: '8px',
                                                    border: `1px solid ${log.CravingLevel <= 3 ? '#b7eb8f' : log.CravingLevel <= 7 ? '#ffd591' : '#ffadd2'}`
                                                }}>
                                                    <div style={{
                                                        fontSize: '18px',
                                                        fontWeight: 'bold',
                                                        color: log.CravingLevel <= 3 ? '#52c41a' : log.CravingLevel <= 7 ? '#fa8c16' : '#f5222d',
                                                        marginBottom: '4px'
                                                    }}>
                                                        {log.CravingLevel}/10
                                                    </div>
                                                    <div style={{
                                                        fontSize: '11px',
                                                        color: '#666',
                                                        fontWeight: '500'
                                                    }}>
                                                        üí≠ M·ª©c th√®m
                                                    </div>
                                                </div>
                                            </Col>

                                            <Col span={6}>
                                                <div style={{
                                                    textAlign: 'center',
                                                    padding: '10px',
                                                    backgroundColor: '#f6ffed',
                                                    borderRadius: '8px',
                                                    border: '1px solid #b7eb8f'
                                                }}>
                                                    <div style={{
                                                        fontSize: '14px',
                                                        fontWeight: 'bold',
                                                        color: '#52c41a',
                                                        marginBottom: '4px'
                                                    }}>
                                                        {log.MoneySaved ? new Intl.NumberFormat('vi-VN').format(log.MoneySaved) + ' VNƒê' : '0 VNƒê'}
                                                    </div>
                                                    <div style={{
                                                        fontSize: '11px',
                                                        color: '#666',
                                                        fontWeight: '500'
                                                    }}>
                                                        üí∞ Ti·∫øt ki·ªám*
                                                    </div>
                                                </div>
                                            </Col>
                                        </Row>

                                        {/* Ghi ch√∫ c·∫£m x√∫c */}
                                        {log.EmotionNotes && (
                                            <div style={{
                                                padding: '12px',
                                                backgroundColor: '#f8f9ff',
                                                borderRadius: '8px',
                                                border: '1px solid #d6e4ff'
                                            }}>
                                                <div style={{
                                                    display: 'flex',
                                                    alignItems: 'flex-start'
                                                }}>
                                                    <HeartOutlined style={{
                                                        color: '#1890ff',
                                                        marginRight: '8px',
                                                        marginTop: '2px',
                                                        fontSize: '14px'
                                                    }} />
                                                    <div>
                                                        <Text strong style={{ color: '#1890ff', fontSize: '13px' }}>
                                                            C·∫£m x√∫c h√¥m nay:
                                                        </Text>
                                                        <div style={{
                                                            marginTop: '4px',
                                                            color: '#333',
                                                            lineHeight: '1.5'
                                                        }}>
                                                            {log.EmotionNotes}
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        )}

                                        {/* Badge tr·∫°ng th√°i */}
                                        {log.CigarettesSmoked === 0 && (
                                            <div style={{
                                                marginTop: '12px',
                                                textAlign: 'center'
                                            }}>
                                                <Tag
                                                    color="success"
                                                    style={{
                                                        padding: '4px 12px',
                                                        borderRadius: '16px',
                                                        fontSize: '12px',
                                                        fontWeight: '600'
                                                    }}
                                                >
                                                    üéâ Ng√†y kh√¥ng thu·ªëc l√°!
                                                </Tag>
                                            </div>
                                        )}
                                    </Card>
                                </List.Item>
                                );
                            }}
                        />
                    ) : (
                        <div className="text-center py-8">
                            <BookOutlined style={{ fontSize: '48px', color: '#d9d9d9' }} />
                            <Title level={4} className="text-gray-400">
                                Ch∆∞a c√≥ d·ªØ li·ªáu ti·∫øn tr√¨nh
                            </Title>
                            <Text className="text-gray-500">
                                H√£y b·∫Øt ƒë·∫ßu ghi l·∫°i ti·∫øn tr√¨nh h√†ng ng√†y ƒë·ªÉ theo d√µi qu√° tr√¨nh cai thu·ªëc.
                            </Text>
                        </div>
                    )}
                    
                    {/* Explanation note about calculation source */}
                    <div style={{
                        marginTop: '16px',
                        padding: '12px',
                        backgroundColor: '#f8f9ff',
                        borderRadius: '8px',
                        border: '1px solid #d6e4ff'
                    }}>
                        <Text style={{ fontSize: '12px', color: '#1890ff', fontStyle: 'italic' }}>
                            üí° <strong>Th√¥ng tin t√≠nh to√°n:</strong> 
                            <br />
                            üí∞ S·ªë ti·ªÅn ti·∫øt ki·ªám ƒë∆∞·ª£c t√≠nh d·ª±a tr√™n k·∫øt qu·∫£ kh·∫£o s√°t nghi·ªán nicotine c·ªßa b·∫°n (n·∫øu c√≥), 
                            ho·∫∑c d·ªØ li·ªáu t·ª´ th√¥ng tin h√∫t thu·ªëc, ho·∫∑c gi√° tr·ªã chu·∫©n th·ªã tr∆∞·ªùng (1.500 VNƒê/ƒëi·∫øu).
                            <br />
                            üèÜ T·ªâ l·ªá th√†nh c√¥ng t√≠ch l≈©y ƒë∆∞·ª£c t√≠nh d·ª±a tr√™n: Gi·∫£m thu·ªëc l√° (40%) + Ki·ªÉm so√°t th√®m (30%) + Nh·∫•t qu√°n (20%) + Xu h∆∞·ªõng (10%).
                            <br />
                            üìà M≈©i t√™n hi·ªÉn th·ªã xu h∆∞·ªõng thay ƒë·ªïi so v·ªõi ng√†y tr∆∞·ªõc: ‚Üó tƒÉng, ‚Üò gi·∫£m, ‚Üí ·ªïn ƒë·ªãnh.
                        </Text>
                    </div>
                </Card>
            </div>
        );
    };

    // Responsive styles for current plan display
    const currentPlanStyles = {
        container: {
            background: 'linear-gradient(135deg, #ecfdf5 0%, #d1fae5 100%)',
            borderRadius: '20px',
            padding: window.innerWidth <= 768 ? '16px' : '24px',
            border: '2px solid #10b981',
            marginBottom: '24px',
            boxShadow: '0 8px 32px rgba(16, 185, 129, 0.2)'
        },
        header: {
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'space-between',
            marginBottom: '20px',
            flexWrap: window.innerWidth <= 480 ? 'wrap' : 'nowrap',
            gap: window.innerWidth <= 480 ? '12px' : '0'
        },
        progressCard: {
            background: 'rgba(255, 255, 255, 0.8)',
            borderRadius: '12px',
            padding: window.innerWidth <= 768 ? '12px' : '16px',
            marginBottom: '20px'
        },
        statCard: {
            background: 'rgba(255, 255, 255, 0.8)',
            borderRadius: '12px',
            padding: window.innerWidth <= 768 ? '8px' : '12px',
            textAlign: 'center'
        },
        actionButtons: {
            display: 'flex',
            gap: '12px',
            flexWrap: 'wrap'
        },
        primaryButton: {
            background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
            border: 'none',
            borderRadius: '12px',
            fontWeight: 600,
            flex: window.innerWidth <= 768 ? '1 1 100%' : '1',
            minWidth: window.innerWidth <= 768 ? 'auto' : '150px'
        }
    };

    // Th√™m function ƒë·ªÉ parse DetailedPlan v√† l·∫•y ra c√°c phases ƒë√£ ch·ªçn
    const parseDetailedPlan = (detailedPlan) => {
        if (!detailedPlan) return { templateId: null, selectedPhases: [] };
        
        // Extract template ID
        const templateIdMatch = detailedPlan.match(/\[TEMPLATE_ID:([^\]]+)\]/);
        const templateId = templateIdMatch ? templateIdMatch[1] : null;
        
        // Extract selected phases from the plan
        const selectedPhases = [];
        const lines = detailedPlan.split('\n');
        let currentPhase = null;
        
        for (const line of lines) {
            const trimmedLine = line.trim();
            
            // Skip empty lines and template ID line
            if (!trimmedLine || trimmedLine.startsWith('[TEMPLATE_ID:')) {
                continue;
            }
            
            // Check if this is a phase header (ends with ':')
            if (trimmedLine.endsWith(':')) {
                // Save previous phase if exists
                if (currentPhase) {
                    selectedPhases.push(currentPhase);
                }
                
                // Start new phase
                currentPhase = {
                    phaseName: trimmedLine.slice(0, -1), // Remove the ':'
                    phaseDescription: '',
                    durationDays: 0
                };
            } else if (currentPhase && trimmedLine.startsWith('‚Ä¢')) {
                // This is a bullet point in the current phase
                currentPhase.phaseDescription += (currentPhase.phaseDescription ? '\n' : '') + trimmedLine;
            }
        }
        
        // Don't forget the last phase
        if (currentPhase) {
            selectedPhases.push(currentPhase);
        }
        
        return { templateId, selectedPhases };
    };

    if (loading || surveyLoading) {
        return (
            <div className="flex items-center justify-center min-h-screen bg-gray-50">
                <div className="text-center">
                    <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-red-600 mx-auto"></div>
                    <p className="mt-4 text-gray-600">ƒêang t·∫£i d·ªØ li·ªáu...</p>
                </div>
            </div>
        );
    }

    // Show survey completion requirement if not completed
    if (!surveyCompleted) {
        return (
            <AccessGuard>
                <div style={{
                    minHeight: '100vh',
                    background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                    padding: '24px',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center'
                }}>
                    <div style={{ maxWidth: '600px', width: '100%' }}>
                        <Card
                            className="shadow-lg rounded-lg"
                            bodyStyle={{ padding: '48px', textAlign: 'center' }}
                        >
                            <div style={{
                                width: '80px',
                                height: '80px',
                                borderRadius: '50%',
                                background: 'linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%)',
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'center',
                                margin: '0 auto 24px',
                                boxShadow: '0 8px 24px rgba(255, 107, 107, 0.3)'
                            }}>
                                <FormOutlined style={{ fontSize: '32px', color: 'white' }} />
                            </div>

                            <Title level={2} style={{
                                margin: '0 0 16px 0',
                                background: 'linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%)',
                                backgroundClip: 'text',
                                WebkitBackgroundClip: 'text',
                                WebkitTextFillColor: 'transparent',
                                fontWeight: 700
                            }}>
                                Ho√†n Th√†nh Kh·∫£o S√°t Tr∆∞·ªõc
                            </Title>

                            <Text style={{
                                color: '#6b7280',
                                fontSize: '16px',
                                lineHeight: '1.6',
                                marginBottom: '24px',
                                display: 'block'
                            }}>
                                ƒê·ªÉ c√≥ th·ªÉ ch·ªçn k·∫ø ho·∫°ch cai thu·ªëc ph√π h·ª£p nh·∫•t, b·∫°n c·∫ßn ho√†n th√†nh kh·∫£o s√°t ƒë√°nh gi√° m·ª©c ƒë·ªô nghi·ªán nicotine tr∆∞·ªõc.
                            </Text>

                            <Alert
                                message="T·∫°i sao c·∫ßn kh·∫£o s√°t?"
                                description="Kh·∫£o s√°t gi√∫p ch√∫ng t√¥i hi·ªÉu r√µ m·ª©c ƒë·ªô nghi·ªán nicotine c·ªßa b·∫°n, t·ª´ ƒë√≥ ƒë·ªÅ xu·∫•t k·∫ø ho·∫°ch cai thu·ªëc ph√π h·ª£p v√† hi·ªáu qu·∫£ nh·∫•t."
                                type="info"
                                showIcon
                                style={{ marginBottom: '24px', borderRadius: '8px' }}
                            />

                            <Button
                                type="primary"
                                size="large"
                                onClick={() => navigate('/smoking-survey')}
                                style={{
                                    background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                                    border: 'none',
                                    borderRadius: '12px',
                                    height: '48px',
                                    paddingInline: '32px',
                                    fontSize: '16px',
                                    fontWeight: 600
                                }}
                            >
                                B·∫Øt ƒê·∫ßu Kh·∫£o S√°t
                            </Button>
                        </Card>
                    </div>
                </div>
            </AccessGuard>
        );
    }

    // Render content based on selected tab
    const renderContent = () => {
        return (
            <AccessGuard>
                <div style={{
                    minHeight: '100vh',
                    background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                    padding: '24px'
                }}>
                    <div className="container mx-auto" style={{ maxWidth: '1200px' }}>
                        <Card
                            title={
                                <div className="text-center">
                                    <Title level={2} style={{ margin: 0, color: '#667eea' }}>
                                        üéØ K·∫ø ho·∫°ch cai thu·ªëc
                                    </Title>
                                    <Text style={{ color: '#6b7280' }}>
                                        Ch·ªçn k·∫ø ho·∫°ch ph√π h·ª£p ƒë·ªÉ b·∫Øt ƒë·∫ßu h√†nh tr√¨nh cai thu·ªëc c·ªßa b·∫°n
                                    </Text>
                                </div>
                            }
                            className="shadow-lg rounded-lg"
                            bodyStyle={{ padding: '32px' }}
                        >
                            <Tabs
                                activeKey={activeTab}
                                onChange={(key) => {
                                    setActiveTab(key);
                                    if (key !== 'plan') {
                                        setJustCreatedPlan(false);
                                    }
                                }}
                                type="card"
                                size="large"
                                style={{
                                    '& .ant-tabs-card .ant-tabs-content': {
                                        marginTop: '16px'
                                    },
                                    '& .ant-tabs-card > .ant-tabs-nav .ant-tabs-tab': {
                                        borderRadius: '12px 12px 0 0',
                                        border: '1px solid rgba(0, 0, 0, 0.1)',
                                        background: 'rgba(255, 255, 255, 0.5)'
                                    },
                                    '& .ant-tabs-card > .ant-tabs-nav .ant-tabs-tab-active': {
                                        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                                        borderColor: 'transparent',
                                        color: 'white'
                                    }
                                }}
                            >
                                <TabPane
                                    tab={
                                        <span>
                                            <FormOutlined />
                                            T·∫°o k·∫ø ho·∫°ch
                                            {justCreatedPlan && (
                                                <Badge dot style={{ marginLeft: 8 }} />
                                            )}
                                        </span>
                                    }
                                    key="plan"
                                >
                                    <Row gutter={[24, 24]}>
                                        {/* Template Selection */}
                                        <Col span={24}>
                                            <div style={{
                                                background: 'linear-gradient(135deg, #fffbeb 0%, #fef3c7 100%)',
                                                borderRadius: '16px',
                                                padding: '24px',
                                                border: '1px solid rgba(245, 158, 11, 0.2)',
                                                marginBottom: '24px'
                                            }}>
                                                <div style={{ display: 'flex', alignItems: 'center', marginBottom: '16px' }}>
                                                    <div style={{
                                                        width: '40px',
                                                        height: '40px',
                                                        borderRadius: '50%',
                                                        background: 'linear-gradient(135deg, #fbbf24 0%, #f59e0b 100%)',
                                                        display: 'flex',
                                                        alignItems: 'center',
                                                        justifyContent: 'center',
                                                        marginRight: '12px'
                                                    }}>
                                                        üéØ
                                                    </div>
                                                    <Title level={4} style={{
                                                        margin: 0,
                                                        color: '#d97706',
                                                        fontWeight: 600
                                                    }}>
                                                        Ch·ªçn m·∫´u k·∫ø ho·∫°ch ph√π h·ª£p
                                                    </Title>
                                                </div>
                                                <Text style={{ color: '#92400e', fontSize: '14px' }}>
                                                    Ch·ªçn m·ªôt trong c√°c m·∫´u k·∫ø ho·∫°ch ƒë∆∞·ª£c thi·∫øt k·∫ø s·∫µn ho·∫∑c t·ª± t·∫°o k·∫ø ho·∫°ch ri√™ng theo nhu c·∫ßu c·ªßa b·∫°n.
                                                    M·ªói g√≥i membership s·∫Ω c√≥ c√°c m·∫´u k·∫ø ho·∫°ch kh√°c nhau.
                                                </Text>
                                            </div>

                                            <Row gutter={[16, 16]} data-template-section>
                                                {getAvailableTemplates().map((template, index) => (
                                                    <Col xs={24} sm={12} lg={8} key={template.id}>
                                                        <div
                                                            style={{
                                                                background: 'rgba(255, 255, 255, 0.95)',
                                                                borderRadius: '16px',
                                                                padding: '24px',
                                                                cursor: 'pointer',
                                                                border: `2px solid ${selectedTemplate?.id === template.id ? template.color : 'transparent'}`,
                                                                boxShadow: selectedTemplate?.id === template.id
                                                                    ? `0 8px 32px ${template.color}30`
                                                                    : '0 4px 16px rgba(0, 0, 0, 0.1)',
                                                                transition: 'all 0.3s ease',
                                                                textAlign: 'center',
                                                                position: 'relative',
                                                                opacity: canAccessTemplate(template) ? 1 : 0.75
                                                            }}
                                                            onClick={() => handleTemplateSelect(template)}
                                                            onMouseEnter={(e) => {
                                                                e.currentTarget.style.transform = 'translateY(-4px)';
                                                                e.currentTarget.style.boxShadow = `0 12px 40px ${template.color}40`;
                                                            }}
                                                            onMouseLeave={(e) => {
                                                                e.currentTarget.style.transform = 'translateY(0)';
                                                                e.currentTarget.style.boxShadow = selectedTemplate?.id === template.id
                                                                    ? `0 8px 32px ${template.color}30`
                                                                    : '0 4px 16px rgba(0, 0, 0, 0.1)';
                                                            }}
                                                        >
                                                            {/* Membership indicator */}
                                                            {!canAccessTemplate(template) && (
                                                                <div style={{
                                                                    position: 'absolute',
                                                                    top: '12px',
                                                                    right: '12px',
                                                                    background: 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)',
                                                                    color: 'white',
                                                                    padding: '4px 8px',
                                                                    borderRadius: '20px',
                                                                    fontSize: '10px',
                                                                    fontWeight: 600,
                                                                    display: 'flex',
                                                                    alignItems: 'center',
                                                                    gap: '4px',
                                                                    boxShadow: '0 2px 8px rgba(245, 158, 11, 0.3)'
                                                                }}>
                                                                    üîí
                                                                    {template.id.includes('premium') ? 'PREMIUM' : 'MEMBERSHIP'}
                                                                </div>
                                                            )}
                                                            <div style={{
                                                                width: '60px',
                                                                height: '60px',
                                                                borderRadius: '50%',
                                                                background: `linear-gradient(135deg, ${template.color} 0%, ${template.color}CC 100%)`,
                                                                display: 'flex',
                                                                alignItems: 'center',
                                                                justifyContent: 'center',
                                                                margin: '0 auto 16px',
                                                                fontSize: '24px',
                                                                boxShadow: `0 8px 24px ${template.color}30`
                                                            }}>
                                                                {template.icon}
                                                            </div>

                                                            <Title level={4} style={{
                                                                marginBottom: '12px',
                                                                color: template.color,
                                                                fontWeight: 600
                                                            }}>
                                                                {template.name}
                                                            </Title>

                                                            <Text style={{
                                                                color: '#6b7280',
                                                                fontSize: '14px',
                                                                lineHeight: '1.5',
                                                                display: 'block',
                                                                marginBottom: '16px'
                                                            }}>
                                                                {template.description}
                                                            </Text>

                                                            <div style={{
                                                                background: `${template.color}15`,
                                                                color: template.color,
                                                                padding: '8px 16px',
                                                                borderRadius: '20px',
                                                                fontSize: '12px',
                                                                fontWeight: 600,
                                                                marginBottom: '16px',
                                                                display: 'inline-block'
                                                            }}>
                                                                {template.duration}
                                                            </div>

                                                            {template.phases.length > 0 && (
                                                                <div style={{ marginBottom: '16px' }}>
                                                                    <Text style={{
                                                                        fontSize: '12px',
                                                                        color: '#9ca3af',
                                                                        fontWeight: 500
                                                                    }}>
                                                                        {template.phases.length} giai ƒëo·∫°n chi ti·∫øt
                                                                    </Text>
                                                                </div>
                                                            )}

                                                            <Button
                                                                type="primary"
                                                                style={{
                                                                    background: canAccessTemplate(template) 
                                                                        ? `linear-gradient(135deg, ${template.color} 0%, ${template.color}CC 100%)`
                                                                        : 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)',
                                                                    border: 'none',
                                                                    borderRadius: '12px',
                                                                    fontSize: '14px',
                                                                    fontWeight: 600,
                                                                    height: '40px',
                                                                    paddingInline: '24px'
                                                                }}
                                                            >
                                                                {canAccessTemplate(template) 
                                                                    ? 'Ch·ªçn k·∫ø ho·∫°ch n√†y' 
                                                                    : 'üîí C·∫ßn Membership'
                                                                }
                                                            </Button>
                                                        </div>
                                                    </Col>
                                                ))}
                                            </Row>
                                        </Col>

                                        {/* Show active plan at top if exists (including pending_cancellation) */}
                                        {existingPlans.length > 0 && existingPlans.some(plan => plan.Status === 'active' || plan.Status === 'pending_cancellation') && (
                                            <Col span={24}>
                                                {(() => {
                                                    const activePlan = existingPlans.find(plan => plan.Status === 'active' || plan.Status === 'pending_cancellation');
                                                    const daysToTarget = calculateDaysToTarget(activePlan.TargetDate);
                                                    const totalDays = dayjs(activePlan.TargetDate).diff(dayjs(activePlan.StartDate), 'day');
                                                    const passedDays = dayjs().diff(dayjs(activePlan.StartDate), 'day');
                                                    const progress = Math.max(0, Math.min(100, (passedDays / totalDays) * 100));

                                                    return (
                                                        <div style={currentPlanStyles.container}>
                                                            {/* Header */}
                                                            <div style={currentPlanStyles.header}>
                                                                <div style={{ display: 'flex', alignItems: 'center' }}>
                                                                    <div style={{
                                                                        width: window.innerWidth <= 480 ? '40px' : '48px',
                                                                        height: window.innerWidth <= 480 ? '40px' : '48px',
                                                                        borderRadius: '50%',
                                                                        background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
                                                                        display: 'flex',
                                                                        alignItems: 'center',
                                                                        justifyContent: 'center',
                                                                        marginRight: '16px',
                                                                        fontSize: window.innerWidth <= 480 ? '16px' : '20px'
                                                                    }}>
                                                                        üéØ
                                                                    </div>
                                                                    <div>
                                                                        <Title level={window.innerWidth <= 480 ? 4 : 3} style={{
                                                                            margin: 0,
                                                                            color: '#047857',
                                                                            fontWeight: 700
                                                                        }}>
                                                                            K·∫ø ho·∫°ch cai thu·ªëc hi·ªán t·∫°i
                                                                        </Title>
                                                                        <Text style={{
                                                                            color: '#059669',
                                                                            fontSize: window.innerWidth <= 480 ? '12px' : '14px',
                                                                            fontWeight: 500
                                                                        }}>
                                                                            ƒêang ho·∫°t ƒë·ªông - Theo d√µi ti·∫øn tr√¨nh h√†ng ng√†y
                                                                        </Text>
                                                                    </div>
                                                                </div>
                                                                <Tag
                                                                    color="success"
                                                                    style={{
                                                                        padding: window.innerWidth <= 480 ? '4px 8px' : '6px 16px',
                                                                        borderRadius: '20px',
                                                                        fontSize: window.innerWidth <= 480 ? '11px' : '13px',
                                                                        fontWeight: 600,
                                                                        border: 'none'
                                                                    }}
                                                                >
                                                                    üü¢ ƒêANG HO·∫†T ƒê·ªòNG
                                                                </Tag>
                                                            </div>

                                                            {/* Progress Bar */}
                                                            <div style={currentPlanStyles.progressCard}>
                                                                <div style={{
                                                                    display: 'flex',
                                                                    justifyContent: 'space-between',
                                                                    alignItems: 'center',
                                                                    marginBottom: '8px'
                                                                }}>
                                                                    <Text style={{ fontSize: '14px', fontWeight: 600, color: '#047857' }}>
                                                                        Ti·∫øn ƒë·ªô ho√†n th√†nh
                                                                    </Text>
                                                                    <Text style={{ fontSize: '14px', fontWeight: 600, color: '#047857' }}>
                                                                        {Math.round(progress)}%
                                                                    </Text>
                                                                </div>
                                                                <div style={{
                                                                    height: '8px',
                                                                    background: '#e5e7eb',
                                                                    borderRadius: '4px',
                                                                    overflow: 'hidden'
                                                                }}>
                                                                    <div style={{
                                                                        height: '100%',
                                                                        width: `${progress}%`,
                                                                        background: 'linear-gradient(90deg, #10b981 0%, #059669 100%)',
                                                                        borderRadius: '4px',
                                                                        transition: 'width 0.3s ease'
                                                                    }} />
                                                                </div>
                                                                <div style={{
                                                                    display: 'flex',
                                                                    justifyContent: 'space-between',
                                                                    marginTop: '8px'
                                                                }}>
                                                                    <Text style={{ fontSize: '12px', color: '#6b7280' }}>
                                                                        B·∫Øt ƒë·∫ßu: {dayjs(activePlan.StartDate).format('DD/MM/YYYY')}
                                                                    </Text>
                                                                    <Text style={{ fontSize: '12px', color: '#6b7280' }}>
                                                                        M·ª•c ti√™u: {dayjs(activePlan.TargetDate).format('DD/MM/YYYY')}
                                                                    </Text>
                                                                </div>
                                                            </div>

                                                            {/* Key Info */}
                                                            <Row gutter={[16, 12]} style={{ marginBottom: '20px' }}>
                                                                <Col xs={24} sm={8}>
                                                                    <div style={currentPlanStyles.statCard}>
                                                                        <div style={{
                                                                            fontSize: window.innerWidth <= 480 ? '18px' : '20px',
                                                                            fontWeight: 700,
                                                                            color: daysToTarget > 0 ? '#10b981' : '#ef4444',
                                                                            marginBottom: '4px'
                                                                        }}>
                                                                            {daysToTarget > 0 ? daysToTarget : 0}
                                                                        </div>
                                                                        <Text style={{ fontSize: '12px', color: '#6b7280' }}>
                                                                            Ng√†y c√≤n l·∫°i
                                                                        </Text>
                                                                    </div>
                                                                </Col>
                                                                <Col xs={24} sm={8}>
                                                                    <div style={currentPlanStyles.statCard}>
                                                                        <div style={{
                                                                            fontSize: window.innerWidth <= 480 ? '18px' : '20px',
                                                                            fontWeight: 700,
                                                                            color: '#10b981',
                                                                            marginBottom: '4px'
                                                                        }}>
                                                                            {Math.max(0, passedDays)}
                                                                        </div>
                                                                        <Text style={{ fontSize: '12px', color: '#6b7280' }}>
                                                                            Ng√†y ƒë√£ tr·∫£i qua
                                                                        </Text>
                                                                    </div>
                                                                </Col>
                                                                <Col xs={24} sm={8}>
                                                                    <div style={currentPlanStyles.statCard}>
                                                                        <div style={{
                                                                            fontSize: window.innerWidth <= 480 ? '18px' : '20px',
                                                                            fontWeight: 700,
                                                                            color: '#f59e0b',
                                                                            marginBottom: '4px'
                                                                        }}>
                                                                            {activePlan.MotivationLevel}/10
                                                                        </div>
                                                                        <Text style={{ fontSize: '12px', color: '#6b7280' }}>
                                                                            M·ª©c ƒë·ªông l·ª±c
                                                                        </Text>
                                                                    </div>
                                                                </Col>
                                                            </Row>

                                                            {/* Action Buttons */}
                                                            <div style={currentPlanStyles.actionButtons}>
                                                                <Button
                                                                    type="primary"
                                                                    size="large"
                                                                    icon={<CheckCircleOutlined />}
                                                                    onClick={() => setActiveTab('progress')}
                                                                    style={currentPlanStyles.primaryButton}
                                                                >
                                                                    Ghi ti·∫øn tr√¨nh h√¥m nay
                                                                </Button>
                                                                <Button
                                                                    size="large"
                                                                    icon={<EyeOutlined />}
                                                                    style={{
                                                                        borderRadius: '12px',
                                                                        fontWeight: 600,
                                                                        flex: window.innerWidth <= 768 ? '1' : 'auto'
                                                                    }}
                                                                    onClick={() => {
                                                                        // Scroll to plan details
                                                                        const planSection = document.querySelector('[data-plan-details]');
                                                                        if (planSection) {
                                                                            planSection.scrollIntoView({ behavior: 'smooth' });
                                                                        }
                                                                    }}
                                                                >
                                                                    Xem chi ti·∫øt
                                                                </Button>
                                                            </div>
                                                        </div>
                                                    );
                                                })()}
                                            </Col>
                                        )}

                                        {/* Show message when no existing plans */}
                                        {existingPlans.length === 0 && (
                                            <Col span={24}>
                                                <div style={{
                                                    background: 'linear-gradient(135deg, #fefce8 0%, #fef3c7 100%)',
                                                    borderRadius: '16px',
                                                    padding: '32px',
                                                    border: '1px solid rgba(245, 158, 11, 0.2)',
                                                    textAlign: 'center'
                                                }}>
                                                    <div style={{
                                                        width: '80px',
                                                        height: '80px',
                                                        borderRadius: '50%',
                                                        background: 'linear-gradient(135deg, #fbbf24 0%, #f59e0b 100%)',
                                                        display: 'flex',
                                                        alignItems: 'center',
                                                        justifyContent: 'center',
                                                        margin: '0 auto 20px',
                                                        fontSize: '32px'
                                                    }}>
                                                        üéØ
                                                    </div>
                                                    <Title level={3} style={{
                                                        margin: '0 0 12px 0',
                                                        color: '#d97706'
                                                    }}>
                                                        B·∫°n ch∆∞a c√≥ k·∫ø ho·∫°ch cai thu·ªëc n√†o
                                                    </Title>
                                                    <Text style={{
                                                        color: '#92400e',
                                                        fontSize: '16px',
                                                        lineHeight: '1.6',
                                                        display: 'block',
                                                        marginBottom: '24px'
                                                    }}>
                                                        H√£y ch·ªçn m·ªôt m·∫´u k·∫ø ho·∫°ch ph√π h·ª£p ·ªü tr√™n ƒë·ªÉ b·∫Øt ƒë·∫ßu h√†nh tr√¨nh cai thu·ªëc c·ªßa b·∫°n.
                                                        M·ªói k·∫ø ho·∫°ch ƒë∆∞·ª£c thi·∫øt k·∫ø khoa h·ªçc ƒë·ªÉ gi√∫p b·∫°n th√†nh c√¥ng.
                                                    </Text>
                                                    <Button
                                                        type="primary"
                                                        size="large"
                                                        icon={<PlusOutlined />}
                                                        style={{
                                                            background: 'linear-gradient(135deg, #fbbf24 0%, #f59e0b 100%)',
                                                            border: 'none',
                                                            borderRadius: '12px',
                                                            fontSize: '16px',
                                                            fontWeight: 600,
                                                            height: '48px',
                                                            paddingInline: '32px'
                                                        }}
                                                        onClick={() => {
                                                            document.querySelector('.ant-tabs-content').scrollTo({
                                                                top: 0,
                                                                behavior: 'smooth'
                                                            });
                                                        }}
                                                    >
                                                        Ch·ªçn k·∫ø ho·∫°ch ngay
                                                    </Button>
                                                </div>
                                            </Col>
                                        )}

                                        {/* Notification for newly created plans */}
                                        {justCreatedPlan && existingPlans.length > 0 && (
                                            <Col span={24}>
                                                <Alert
                                                    message="üéâ K·∫ø ho·∫°ch ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!"
                                                    description="K·∫ø ho·∫°ch cai thu·ªëc c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c l∆∞u. B·∫°n c√≥ th·ªÉ xem chi ti·∫øt b√™n d∆∞·ªõi v√† b·∫Øt ƒë·∫ßu theo d√µi ti·∫øn tr√¨nh h√†ng ng√†y."
                                                    type="success"
                                                    showIcon
                                                    style={{
                                                        marginBottom: '24px',
                                                        borderRadius: '12px',
                                                        border: '1px solid #10b981'
                                                    }}
                                                    action={
                                                        <Button
                                                            size="small"
                                                            type="primary"
                                                            onClick={() => setActiveTab('progress')}
                                                            style={{
                                                                background: '#10b981',
                                                                borderColor: '#10b981'
                                                            }}
                                                        >
                                                            B·∫Øt ƒë·∫ßu ghi ti·∫øn tr√¨nh
                                                        </Button>
                                                    }
                                                />
                                            </Col>
                                        )}

                                        {/* Existing Plans Display - Hi·ªÉn th·ªã k·∫ø ho·∫°ch ƒë√£ t·∫°o */}
                                        {existingPlans.length > 0 && (
                                            <Col span={24}>
                                                <div style={{
                                                    background: 'linear-gradient(135deg, #f0f9ff 0%, #e0e7ff 100%)',
                                                    borderRadius: '16px',
                                                    padding: '24px',
                                                    border: '1px solid rgba(59, 130, 246, 0.2)',
                                                    marginBottom: '24px'
                                                }}>
                                                    <div style={{ display: 'flex', alignItems: 'center', marginBottom: '16px' }}>
                                                        <div style={{
                                                            width: '40px',
                                                            height: '40px',
                                                            borderRadius: '50%',
                                                            background: 'linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%)',
                                                            display: 'flex',
                                                            alignItems: 'center',
                                                            justifyContent: 'center',
                                                            marginRight: '12px'
                                                        }}>
                                                            üìö
                                                        </div>
                                                        <Title level={4} style={{
                                                            margin: 0,
                                                            color: '#1d4ed8',
                                                            fontWeight: 600
                                                        }}>
                                                            {existingPlans.some(plan => plan.Status === 'active' || plan.Status === 'pending_cancellation') ? 
                                                                'K·∫ø ho·∫°ch cai thu·ªëc chi ti·∫øt' : 
                                                                'L·ªãch s·ª≠ k·∫ø ho·∫°ch cai thu·ªëc'
                                                            }
                                                        </Title>
                                                    </div>
                                                    <Text style={{ color: '#1e40af', fontSize: '14px' }}>
                                                        {existingPlans.some(plan => plan.Status === 'active' || plan.Status === 'pending_cancellation') ? 
                                                            'Chi ti·∫øt k·∫ø ho·∫°ch cai thu·ªëc hi·ªán t·∫°i v√† l·ªãch s·ª≠ c·ªßa b·∫°n.' :
                                                            'ƒê√¢y l√† nh·ªØng k·∫ø ho·∫°ch cai thu·ªëc m√† b·∫°n ƒë√£ t·∫°o tr∆∞·ªõc ƒë√¢y. B·∫°n c√≥ th·ªÉ xem chi ti·∫øt v√† t·∫°o k·∫ø ho·∫°ch m·ªõi.'
                                                        }
                                                    </Text>
                                                </div>

                                                <List
                                                    dataSource={existingPlans}
                                                    data-plan-details
                                                    renderItem={(plan) => {
                                                        const daysToTarget = calculateDaysToTarget(plan.TargetDate);
                                                        const isActive = plan.Status === 'active' || plan.Status === 'pending_cancellation';
                                                        return (
                                                            <List.Item style={{ padding: 0, marginBottom: '16px' }}>
                                                                <Card
                                                                    className="w-full"
                                                                    style={{
                                                                        borderRadius: '12px',
                                                                        boxShadow: isActive ? '0 4px 16px rgba(16, 185, 129, 0.2)' : '0 2px 8px rgba(0,0,0,0.1)',
                                                                        border: isActive ? '2px solid #10b981' : '1px solid #f0f0f0'
                                                                    }}
                                                                    bodyStyle={{ padding: '20px' }}
                                                                >
                                                                    {/* Header v·ªõi status v√† ng√†y t·∫°o */}
                                                                    <div style={{
                                                                        display: 'flex',
                                                                        justifyContent: 'space-between',
                                                                        alignItems: 'center',
                                                                        marginBottom: '16px',
                                                                        paddingBottom: '12px',
                                                                        borderBottom: '1px solid #f0f0f0'
                                                                    }}>
                                                                        <Tag
                                                                            color={getStatusColor(plan.Status)}
                                                                            style={{
                                                                                padding: '4px 12px',
                                                                                borderRadius: '16px',
                                                                                fontSize: '12px',
                                                                                fontWeight: 600
                                                                            }}
                                                                        >
                                                                            {getStatusText(plan.Status)}
                                                                        </Tag>
                                                                        <Text style={{ fontSize: '12px', color: '#6b7280' }}>
                                                                            T·∫°o ng√†y: {dayjs(plan.CreatedAt).format('DD/MM/YYYY')}
                                                                        </Text>
                                                                    </div>

                                                                    {/* Th√¥ng tin chi ti·∫øt */}
                                                                    <Row gutter={[16, 12]}>
                                                                        <Col xs={24} sm={12}>
                                                                            <div style={{ marginBottom: '12px' }}>
                                                                                <CalendarOutlined style={{ marginRight: '8px', color: '#3b82f6' }} />
                                                                                <Text strong>Ng√†y b·∫Øt ƒë·∫ßu:</Text>
                                                                                <div style={{ marginLeft: '24px', marginTop: '4px' }}>
                                                                                    <Text style={{ fontSize: '14px' }}>{dayjs(plan.StartDate).format('DD/MM/YYYY')}</Text>
                                                                                </div>
                                                                            </div>
                                                                        </Col>

                                                                        <Col xs={24} sm={12}>
                                                                            <div style={{ marginBottom: '12px' }}>
                                                                                <CalendarOutlined style={{ marginRight: '8px', color: '#10b981' }} />
                                                                                <Text strong>Ng√†y m·ª•c ti√™u:</Text>
                                                                                <div style={{ marginLeft: '24px', marginTop: '4px' }}>
                                                                                    <Text style={{ fontSize: '14px' }}>{dayjs(plan.TargetDate).format('DD/MM/YYYY')}</Text>
                                                                                    {isActive && (
                                                                                        <div style={{ marginTop: '2px' }}>
                                                                                            <Text style={{
                                                                                                fontSize: '12px',
                                                                                                color: daysToTarget > 0 ? '#10b981' : '#ef4444',
                                                                                                fontWeight: 500
                                                                                            }}>
                                                                                                {daysToTarget > 0 ? `C√≤n ${daysToTarget} ng√†y` : 'ƒê√£ qua h·∫°n'}
                                                                                            </Text>
                                                                                        </div>
                                                                                    )}
                                                                                </div>
                                                                            </div>
                                                                        </Col>

                                                                        <Col xs={24} sm={12}>
                                                                            <div style={{ marginBottom: '12px' }}>
                                                                                <HeartOutlined style={{ marginRight: '8px', color: '#ef4444' }} />
                                                                                <Text strong>M·ª©c ƒë·ªông l·ª±c:</Text>
                                                                                <div style={{ marginLeft: '24px', marginTop: '4px' }}>
                                                                                    <Text style={{ fontSize: '14px', fontWeight: 600 }}>
                                                                                        {plan.MotivationLevel}/10
                                                                                    </Text>
                                                                                </div>
                                                                            </div>
                                                                        </Col>

                                                                        <Col span={24}>
                                                                            <div style={{ marginBottom: '16px' }}>
                                                                                <BulbOutlined style={{ marginRight: '8px', color: '#f59e0b' }} />
                                                                                <Text strong>L√Ω do cai thu·ªëc:</Text>
                                                                                <Paragraph
                                                                                    style={{
                                                                                        marginLeft: '24px',
                                                                                        marginTop: '8px',
                                                                                        marginBottom: '0',
                                                                                        fontSize: '14px',
                                                                                        lineHeight: '1.6'
                                                                                    }}
                                                                                    ellipsis={{ rows: 3, expandable: true, symbol: 'Xem th√™m' }}
                                                                                >
                                                                                    {plan.Reason}
                                                                                </Paragraph>
                                                                            </div>
                                                                        </Col>

                                                                        {/* Hi·ªÉn th·ªã k·∫ø ho·∫°ch chi ti·∫øt - lu√¥n hi·ªÉn th·ªã */}
                                                                        <Col span={24}>
                                                                            <div style={{
                                                                                background: '#f8fafc',
                                                                                padding: '16px',
                                                                                borderRadius: '8px',
                                                                                border: '1px solid #e2e8f0'
                                                                            }}>
                                                                                <div style={{ marginBottom: '12px' }}>
                                                                                    <BookOutlined style={{ marginRight: '8px', color: '#6366f1' }} />
                                                                                    <Text strong>K·∫ø ho·∫°ch chi ti·∫øt:</Text>
                                                                                </div>

                                                                                {!plan.DetailedPlan ? (
                                                                                    /* T·∫°o template m·∫∑c ƒë·ªãnh d·ª±a v√†o membership */
                                                                                    (() => {
                                                                                        // X√°c ƒë·ªãnh template m·∫∑c ƒë·ªãnh d·ª±a v√†o paymentInfo
                                                                                        let defaultTemplate = null;

                                                                                        if (paymentInfo && paymentInfo.PlanName) {
                                                                                            const planName = paymentInfo.PlanName.toLowerCase();
                                                                                            if (planName.includes('premium') || planName.includes('cao c·∫•p')) {
                                                                                                defaultTemplate = allTemplateOptions.find(t => t.id === 'premium');
                                                                                            } else if (planName.includes('basic') || planName.includes('c∆° b·∫£n')) {
                                                                                                defaultTemplate = allTemplateOptions.find(t => t.id === 'basic');
                                                                                            }
                                                                                        }

                                                                                        // Fallback: d√πng basic template
                                                                                        if (!defaultTemplate) {
                                                                                            defaultTemplate = allTemplateOptions.find(t => t.id === 'basic');
                                                                                        }

                                                                                        if (defaultTemplate && defaultTemplate.phases.length > 0) {
                                                                                            return (
                                                                                                <div style={{ marginLeft: '24px' }}>
                                                                                                    {/* Info v·ªÅ template ƒë∆∞·ª£c √°p d·ª•ng */}
                                                                                                    <div style={{
                                                                                                        marginBottom: '16px',
                                                                                                        padding: '12px',
                                                                                                        background: `${defaultTemplate.color}10`,
                                                                                                        borderRadius: '8px',
                                                                                                        border: `1px solid ${defaultTemplate.color}30`
                                                                                                    }}>
                                                                                                        <div style={{ display: 'flex', alignItems: 'center', marginBottom: '8px' }}>
                                                                                                            <span style={{ fontSize: '16px', marginRight: '8px' }}>
                                                                                                                üìã
                                                                                                            </span>
                                                                                                            <Text strong style={{ color: defaultTemplate.color, fontSize: '14px' }}>
                                                                                                                K·∫ø ho·∫°ch m·∫∑c ƒë·ªãnh: {defaultTemplate.name}
                                                                                                            </Text>
                                                                                                        </div>
                                                                                                        <Text style={{ fontSize: '12px', color: '#6b7280' }}>
                                                                                                            ƒê∆∞·ª£c √°p d·ª•ng t·ª± ƒë·ªông d·ª±a v√†o g√≥i d·ªãch v·ª• c·ªßa b·∫°n
                                                                                                        </Text>
                                                                                                    </div>

                                                                                                    {/* C√°c phases c·ªßa template */}
                                                                                                    {defaultTemplate.phases.map((phase, index) => (
                                                                                                        <div key={index} style={{
                                                                                                            marginBottom: '16px',
                                                                                                            padding: '12px',
                                                                                                            background: 'white',
                                                                                                            borderRadius: '8px',
                                                                                                            border: '1px solid #e2e8f0'
                                                                                                        }}>
                                                                                                            <div style={{
                                                                                                                display: 'flex',
                                                                                                                alignItems: 'flex-start',
                                                                                                                marginBottom: '8px'
                                                                                                            }}>
                                                                                                                <Checkbox
                                                                                                                    checked={true}
                                                                                                                    disabled
                                                                                                                    style={{ marginRight: '8px', marginTop: '2px' }}
                                                                                                                />
                                                                                                                <Text strong style={{
                                                                                                                    color: defaultTemplate.color,
                                                                                                                    fontSize: '14px'
                                                                                                                }}>
                                                                                                                    {phase.phaseName}
                                                                                                                </Text>
                                                                                                            </div>
                                                                                                            <div style={{
                                                                                                                marginLeft: '28px',
                                                                                                                fontSize: '13px',
                                                                                                                lineHeight: '1.6',
                                                                                                                color: '#4b5563'
                                                                                                            }}>
                                                                                                                {phase.phaseDescription.split('‚Ä¢').map((item, idx) => {
                                                                                                                    if (idx === 0 && item.trim() === '') return null;
                                                                                                                    return (
                                                                                                                        <div key={idx} style={{
                                                                                                                            marginBottom: '4px',
                                                                                                                            display: 'flex',
                                                                                                                            alignItems: 'flex-start'
                                                                                                                        }}>
                                                                                                                            <span style={{
                                                                                                                                marginRight: '6px',
                                                                                                                                color: '#10b981',
                                                                                                                                fontWeight: 'bold'
                                                                                                                            }}>‚Ä¢</span>
                                                                                                                            <span>{item.trim()}</span>
                                                                                                                        </div>
                                                                                                                    );
                                                                                                                })}
                                                                                                            </div>

                                                                                                            {/* Duration badge */}
                                                                                                            <div style={{
                                                                                                                marginTop: '8px',
                                                                                                                marginLeft: '28px',
                                                                                                                display: 'flex',
                                                                                                                justifyContent: 'flex-end'
                                                                                                            }}>
                                                                                                                <Tag
                                                                                                                    color="blue"
                                                                                                                    style={{
                                                                                                                        fontSize: '11px',
                                                                                                                        padding: '2px 8px',
                                                                                                                        borderRadius: '12px'
                                                                                                                    }}
                                                                                                                >
                                                                                                                    üìÖ {phase.durationDays} ng√†y
                                                                                                                </Tag>
                                                                                                            </div>
                                                                                                        </div>
                                                                                                    ))}
                                                                                                </div>
                                                                                            );
                                                                                        } else {
                                                                                            // Fallback n·∫øu kh√¥ng c√≥ template n√†o
                                                                                            return (
                                                                                                <div style={{
                                                                                                    textAlign: 'center',
                                                                                                    padding: '20px',
                                                                                                    color: '#6b7280'
                                                                                                }}>
                                                                                                    <BookOutlined style={{ fontSize: '24px', marginBottom: '8px', color: '#d1d5db' }} />
                                                                                                    <Text style={{ display: 'block', fontSize: '14px', marginBottom: '8px' }}>
                                                                                                        K·∫ø ho·∫°ch n√†y ch∆∞a c√≥ chi ti·∫øt c·ª• th·ªÉ
                                                                                                    </Text>
                                                                                                    <Text style={{ fontSize: '12px', color: '#9ca3af', marginBottom: '16px' }}>
                                                                                                        T·∫°o k·∫ø ho·∫°ch m·ªõi v·ªõi template ƒë·ªÉ c√≥ h∆∞·ªõng d·∫´n chi ti·∫øt
                                                                                                    </Text>
                                                                                                    <Button
                                                                                                        type="primary"
                                                                                                        size="small"
                                                                                                        onClick={() => {
                                                                                                            document.querySelector('[data-template-section]')?.scrollIntoView({
                                                                                                                behavior: 'smooth',
                                                                                                                block: 'start'
                                                                                                            });
                                                                                                        }}
                                                                                                        style={{
                                                                                                            background: '#6366f1',
                                                                                                            borderColor: '#6366f1'
                                                                                                        }}
                                                                                                    >
                                                                                                        T·∫°o k·∫ø ho·∫°ch m·ªõi v·ªõi template
                                                                                                    </Button>
                                                                                                </div>
                                                                                            );
                                                                                        }
                                                                                    })()
                                                                                ) : (
                                                                                    /* Hi·ªÉn th·ªã ch·ªâ nh·ªØng phases ƒë√£ ƒë∆∞·ª£c ch·ªçn */
                                                                                    (() => {
                                                                                        const { templateId, selectedPhases } = parseDetailedPlan(plan.DetailedPlan);
                                                                                        
                                                                                        // T√¨m template t∆∞∆°ng ·ª©ng
                                                                                        const matchedTemplate = templateId ? allTemplateOptions.find(t => t.id === templateId) : null;
                                                                                        
                                                                                        if (selectedPhases.length > 0) {
                                                                                            return (
                                                                                                <div style={{ marginLeft: '24px' }}>
                                                                                                    {/* Template info */}
                                                                                                    {matchedTemplate && (
                                                                                                        <div style={{
                                                                                                            marginBottom: '16px',
                                                                                                            padding: '12px',
                                                                                                            background: `${matchedTemplate.color}10`,
                                                                                                            borderRadius: '8px',
                                                                                                            border: `1px solid ${matchedTemplate.color}30`
                                                                                                        }}>
                                                                                                            <div style={{ display: 'flex', alignItems: 'center', marginBottom: '8px' }}>
                                                                                                                <span style={{ fontSize: '20px', marginRight: '8px' }}>
                                                                                                                    {matchedTemplate.icon}
                                                                                                                </span>
                                                                                                                <Text strong style={{ color: matchedTemplate.color }}>
                                                                                                                    {matchedTemplate.name}
                                                                                                                </Text>
                                                                                                            </div>
                                                                                                            <Text style={{ fontSize: '12px', color: '#6b7280' }}>
                                                                                                                {matchedTemplate.description}
                                                                                                            </Text>
                                                                                                        </div>
                                                                                                    )}

                                                                                                    {/* Ch·ªâ hi·ªÉn th·ªã nh·ªØng phases ƒë√£ ƒë∆∞·ª£c ch·ªçn */}
                                                                                                    {selectedPhases.map((phase, index) => (
                                                                                                        <div key={index} style={{
                                                                                                            marginBottom: '16px',
                                                                                                            padding: '12px',
                                                                                                            background: 'white',
                                                                                                            borderRadius: '8px',
                                                                                                            border: '1px solid #e2e8f0'
                                                                                                        }}>
                                                                                                            <div style={{
                                                                                                                display: 'flex',
                                                                                                                alignItems: 'flex-start',
                                                                                                                marginBottom: '8px'
                                                                                                            }}>
                                                                                                                <Checkbox
                                                                                                                    checked={true}
                                                                                                                    disabled
                                                                                                                    style={{ marginRight: '8px', marginTop: '2px' }}
                                                                                                                />
                                                                                                                <Text strong style={{
                                                                                                                    color: matchedTemplate ? matchedTemplate.color : '#6366f1',
                                                                                                                    fontSize: '14px'
                                                                                                                }}>
                                                                                                                    {phase.phaseName}
                                                                                                                </Text>
                                                                                                            </div>
                                                                                                            <div style={{
                                                                                                                marginLeft: '28px',
                                                                                                                fontSize: '13px',
                                                                                                                lineHeight: '1.6',
                                                                                                                color: '#4b5563'
                                                                                                            }}>
                                                                                                                {phase.phaseDescription.split('\n').map((item, idx) => {
                                                                                                                    if (!item.trim()) return null;
                                                                                                                    return (
                                                                                                                        <div key={idx} style={{
                                                                                                                            marginBottom: '4px',
                                                                                                                            display: 'flex',
                                                                                                                            alignItems: 'flex-start'
                                                                                                                        }}>
                                                                                                                            <span style={{
                                                                                                                                marginRight: '6px',
                                                                                                                                color: '#10b981',
                                                                                                                                fontWeight: 'bold'
                                                                                                                            }}>‚Ä¢</span>
                                                                                                                            <span>{item.trim()}</span>
                                                                                                                        </div>
                                                                                                                    );
                                                                                                                })}
                                                                                                            </div>

                                                                                                            {/* Duration badge - ∆∞·ªõc t√≠nh d·ª±a v√†o template g·ªëc */}
                                                                                                            {matchedTemplate && (
                                                                                                                <div style={{
                                                                                                                    marginTop: '8px',
                                                                                                                    marginLeft: '28px',
                                                                                                                    display: 'flex',
                                                                                                                    justifyContent: 'flex-end'
                                                                                                                }}>
                                                                                                                    <Tag
                                                                                                                        color="blue"
                                                                                                                        style={{
                                                                                                                            fontSize: '11px',
                                                                                                                            padding: '2px 8px',
                                                                                                                            borderRadius: '12px'
                                                                                                                        }}
                                                                                                                    >
                                                                                                                        üìÖ {(() => {
                                                                                                                            // T√¨m phase t∆∞∆°ng ·ª©ng trong template g·ªëc ƒë·ªÉ l·∫•y duration
                                                                                                                            const originalPhase = matchedTemplate.phases.find(p => 
                                                                                                                                p.phaseName === phase.phaseName
                                                                                                                            );
                                                                                                                            return originalPhase ? originalPhase.durationDays : 'N/A';
                                                                                                                        })()} ng√†y
                                                                                                                    </Tag>
                                                                                                                </div>
                                                                                                            )}
                                                                                                        </div>
                                                                                                    ))}
                                                                                                </div>
                                                                                            );
                                                                                        } else {
                                                                                            // Fallback: hi·ªÉn th·ªã text th√¥ n·∫øu kh√¥ng parse ƒë∆∞·ª£c
                                                                                            return (
                                                                                                <Paragraph
                                                                                                    style={{
                                                                                                        marginLeft: '24px',
                                                                                                        marginBottom: '0',
                                                                                                        fontSize: '13px',
                                                                                                        lineHeight: '1.6',
                                                                                                        whiteSpace: 'pre-line'
                                                                                                    }}
                                                                                                    ellipsis={{ rows: 5, expandable: true, symbol: 'Xem to√†n b·ªô k·∫ø ho·∫°ch' }}
                                                                                                >
                                                                                                    {plan.DetailedPlan}
                                                                                                </Paragraph>
                                                                                            );
                                                                                        }
                                                                                    })()
                                                                                )}
                                                                            </div>
                                                                        </Col>
                                                                    </Row>
                                                                </Card>
                                                            </List.Item>
                                                        );
                                                    }}
                                                />
                                            </Col>
                                        )}
                                    </Row>
                                </TabPane>
                                <TabPane
                                    tab={
                                        <span>
                                            <BookOutlined />
                                            Ti·∫øn tr√¨nh
                                            <Badge
                                                status="processing"
                                                style={{ marginLeft: 8 }}
                                            />
                                        </span>
                                    }
                                    key="progress"
                                >
                                    <ProgressLogs existingPlans={existingPlans} setActiveTab={setActiveTab} />
                                </TabPane>

                            </Tabs>
                        </Card>

                        {/* Th√¥ng tin h∆∞·ªõng d·∫´n */}
                        <Card className="shadow-lg rounded-lg mt-6">
                            <Title level={4}>
                                <CheckCircleOutlined className="mr-2 text-green-500" />
                                L∆∞u √Ω quan tr·ªçng
                            </Title>
                            <Row gutter={[16, 16]}>
                                <Col xs={24} md={8}>
                                    <Card size="small" className="h-full bg-blue-50">
                                        <Title level={5}>K·∫ø ho·∫°ch theo g√≥i</Title>
                                        <Text>
                                            M·ªói g√≥i d·ªãch v·ª• c√≥ k·∫ø ho·∫°ch m·∫´u chuy√™n nghi·ªáp ƒë∆∞·ª£c thi·∫øt k·∫ø ri√™ng ƒë·ªÉ t·ªëi ∆∞u h√≥a hi·ªáu qu·∫£ cai thu·ªëc.
                                        </Text>
                                    </Card>
                                </Col>

                                <Col xs={24} md={8}>
                                    <Card size="small" className="h-full bg-green-50">
                                        <Title level={5}>T√≠nh nƒÉng Coach</Title>
                                        <Text>
                                            C√°c coach s·∫Ω c√≥ th·ªÉ can thi·ªáp v√† ch·ªânh s·ª≠a k·∫ø ho·∫°ch chi ti·∫øt ƒë·ªÉ h·ªó tr·ª£ b·∫°n t·ªët h∆°n.
                                        </Text>
                                    </Card>
                                </Col>

                                <Col xs={24} md={8}>
                                    <Card size="small" className="h-full bg-yellow-50">
                                        <Title level={5}>Theo d√µi ti·∫øn tr√¨nh</Title>
                                        <Text>
                                            H√£y th∆∞·ªùng xuy√™n c·∫≠p nh·∫≠t ti·∫øn tr√¨nh v√† ƒëi·ªÅu ch·ªânh k·∫ø ho·∫°ch ph√π h·ª£p v·ªõi t√¨nh h√¨nh th·ª±c t·∫ø.
                                        </Text>
                                    </Card>
                                </Col>
                            </Row>
                        </Card>
                    </div>
                </div>
            </AccessGuard>
        );
    };

    return renderContent();
};

export default QuitPlanPage; 